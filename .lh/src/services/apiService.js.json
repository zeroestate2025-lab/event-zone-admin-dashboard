{
    "sourceFile": "src/services/apiService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1748538257442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748538398553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+const API_BASE_URL = \"http://localhost:3000\";\r\n+\r\n+// IMPORTANT: In a real application, the token should not be hardcoded here.\r\n+// It should be managed securely, ideally obtained after login and stored\r\n+// in a secure way (e.g., HttpOnly cookie, or managed via Auth Context/Redux).\r\n+// For demonstration, we'll use the one provided.\r\n+const TOKEN =\r\n+  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1vbmVzaHdhciIsInN1YiI6MTIsImlhdCI6MTc0ODQ5MzcwMSwiZXhwIjoxNzY0MDQ1NzAxfQ.R3lljEkXTBnfb4PErBdiSW-eWkfi-L6OKwyDQLnzWnw\";\r\n+\r\n+/**\r\n+ * A helper function to make fetch requests with common headers.\r\n+ * @param {string} endpoint - The API endpoint (e.g., '/user/count').\r\n+ * @param {object} options - Fetch options (method, body, etc.).\r\n+ * @returns {Promise<any>} - The JSON response from the API.\r\n+ */\r\n+const apiFetch = async (endpoint, options = {}) => {\r\n+  const headers = {\r\n+    Authorization: `Bearer ${TOKEN}`,\r\n+    \"Content-Type\": \"application/json\",\r\n+    ...options.headers,\r\n+  };\r\n+\r\n+  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n+    ...options,\r\n+    headers,\r\n+  });\r\n+\r\n+  if (!response.ok) {\r\n+    const errorData = await response\r\n+      .json()\r\n+      .catch(() => ({ message: \"Unknown error structure\" }));\r\n+    throw new Error(\r\n+      `HTTP error! status: ${response.status}, message: ${\r\n+        errorData.message || response.statusText\r\n+      } for ${endpoint}`\r\n+    );\r\n+  }\r\n+  return response.json();\r\n+};\r\n+\r\n+/**\r\n+ * Fetches the total count of users.\r\n+ * @returns {Promise<number>} - The count of users.\r\n+ */\r\n+export const getUserCount = async () => {\r\n+  const data = await apiFetch(\"/user/count\");\r\n+  return data.count !== undefined ? data.count : data; // Adjust based on your API response structure\r\n+};\r\n+\r\n+/**\r\n+ * Fetches the total count of business partners.\r\n+ * @returns {Promise<number>} - The count of business partners.\r\n+ */\r\n+export const getBusinessPartnerCount = async () => {\r\n+  const data = await apiFetch(\"/business-partner/count\");\r\n+  return data.count !== undefined ? data.count : data; // Adjust based on your API response structure\r\n+};\r\n+\r\n+/**\r\n+ * Fetches all users.\r\n+ * @returns {Promise<Array<object>>} - A promise that resolves to an array of user objects.\r\n+ */\r\n+export const getAllUsers = async () => {\r\n+  return await apiFetch(\"/user/all\"); // Assumes the API returns an array of users directly\r\n+};\r\n+\r\n+/**\r\n+ * Fetches all business partners.\r\n+ * @returns {Promise<Array<object>>} - A promise that resolves to an array of business partner objects.\r\n+ */\r\n+export const getAllBusinessPartners = async () => {\r\n+  return await apiFetch(\"/business-partner/all\"); // Assumes the API returns an array of business partners directly\r\n+};\r\n+\r\n+/**\r\n+ * Updates a business partner.\r\n+ * @param {object} updateData - The data to update the business partner with (e.g., { id: 11, isApproved: true }).\r\n+ * @returns {Promise<object>} - A promise that resolves to the updated business partner object.\r\n+ */\r\n+export const updateBusinessPartner = async (updateData) => {\r\n+  return await apiFetch(\"/business-partner\", {\r\n+    method: \"PUT\",\r\n+    body: JSON.stringify(updateData),\r\n+  });\r\n+};\r\n+\r\n+/**\r\n+ * Fetches all promotions.\r\n+ * @returns {Promise<Array<object>>} - A promise that resolves to an array of promotion objects.\r\n+ */\r\n+export const getAllPromotions = async () => {\r\n+  return await apiFetch(\"/promotions/all\"); // Assumes the API returns an array of promotions directly\r\n+};\r\n+\r\n+/**\r\n+ * Adds a new promotion.\r\n+ * @param {object} promotionData - The data for the new promotion (e.g., { businessId: 3, position: \"3\", isApproved: true }).\r\n+ * @returns {Promise<object>} - A promise that resolves to the newly created promotion object.\r\n+ */\r\n+export const addPromotion = async (promotionData) => {\r\n+  return await apiFetch(\"/promotions/add\", {\r\n+    method: \"POST\",\r\n+    body: JSON.stringify(promotionData),\r\n+  });\r\n+};\r\n"
                },
                {
                    "date": 1748878318553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const API_BASE_URL = \"http://3000\";\r\n+const API_BASE_URL = \"http://c3000\";\r\n \r\n // IMPORTANT: In a real application, the token should not be hardcoded here.\r\n // It should be managed securely, ideally obtained after login and stored\r\n // in a secure way (e.g., HttpOnly cookie, or managed via Auth Context/Redux).\r\n"
                },
                {
                    "date": 1748878326384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+const API_BASE_URL = \"http://codizone.in// IMPORTANT: In a real application, the token should not be hardcoded here.\r\n+// It should be managed securely, ideally obtained after login and stored\r\n+// in a secure way (e.g., HttpOnly cookie, or managed via Auth Context/Redux).\r\n+// For demonstration, we'll use the one provided.\r\n+const TOKEN =\r\n+  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1vbmVzaHdhciIsInN1YiI6MTIsImlhdCI6MTc0ODQ5MzcwMSwiZXhwIjoxNzY0MDQ1NzAxfQ.R3lljEkXTBnfb4PErBdiSW-eWkfi-L6OKwyDQLnzWnw\";\r\n+\r\n+/**\r\n+ * A helper function to make fetch requests with common headers.\r\n+ * @param {string} endpoint - The API endpoint (e.g., '/user/count').\r\n+ * @param {object} options - Fetch options (method, body, etc.).\r\n+ * @returns {Promise<any>} - The JSON response from the API.\r\n+ */\r\n+const apiFetch = async (endpoint, options = {}) => {\r\n+  const headers = {\r\n+    Authorization: `Bearer ${TOKEN}`,\r\n+    \"Content-Type\": \"application/json\",\r\n+    ...options.headers,\r\n+  };\r\n+\r\n+  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n+    ...options,\r\n+    headers,\r\n+  });\r\n+\r\n+  if (!response.ok) {\r\n+    const errorData = await response\r\n+      .json()\r\n+      .catch(() => ({ message: \"Unknown error structure\" }));\r\n+    throw new Error(\r\n+      `HTTP error! status: ${response.status}, message: ${\r\n+        errorData.message || response.statusText\r\n+      } for ${endpoint}`\r\n+    );\r\n+  }\r\n+  return response.json();\r\n+};\r\n+\r\n+/**\r\n+ * Fetches the total count of users.\r\n+ * @returns {Promise<number>} - The count of users.\r\n+ */\r\n+export const getUserCount = async () => {\r\n+  const data = await apiFetch(\"/user/count\");\r\n+  return data.count !== undefined ? data.count : data; // Adjust based on your API response structure\r\n+};\r\n+\r\n+/**\r\n+ * Fetches the total count of business partners.\r\n+ * @returns {Promise<number>} - The count of business partners.\r\n+ */\r\n+export const getBusinessPartnerCount = async () => {\r\n+  const data = await apiFetch(\"/business-partner/count\");\r\n+  return data.count !== undefined ? data.count : data; // Adjust based on your API response structure\r\n+};\r\n+\r\n+/**\r\n+ * Fetches all users.\r\n+ * @returns {Promise<Array<object>>} - A promise that resolves to an array of user objects.\r\n+ */\r\n+export const getAllUsers = async () => {\r\n+  return await apiFetch(\"/user/all\"); // Assumes the API returns an array of users directly\r\n+};\r\n+\r\n+/**\r\n+ * Fetches all business partners.\r\n+ * @returns {Promise<Array<object>>} - A promise that resolves to an array of business partner objects.\r\n+ */\r\n+export const getAllBusinessPartners = async () => {\r\n+  return await apiFetch(\"/business-partner/all\"); // Assumes the API returns an array of business partners directly\r\n+};\r\n+\r\n+/**\r\n+ * Updates a business partner.\r\n+ * @param {object} updateData - The data to update the business partner with (e.g., { id: 11, isApproved: true }).\r\n+ * @returns {Promise<object>} - A promise that resolves to the updated business partner object.\r\n+ */\r\n+export const updateBusinessPartner = async (updateData) => {\r\n+  return await apiFetch(\"/business-partner\", {\r\n+    method: \"PUT\",\r\n+    body: JSON.stringify(updateData),\r\n+  });\r\n+};\r\n+\r\n+/**\r\n+ * Fetches all promotions.\r\n+ * @returns {Promise<Array<object>>} - A promise that resolves to an array of promotion objects.\r\n+ */\r\n+export const getAllPromotions = async () => {\r\n+  return await apiFetch(\"/promotions/all\"); // Assumes the API returns an array of promotions directly\r\n+};\r\n+\r\n+/**\r\n+ * Adds a new promotion.\r\n+ * @param {object} promotionData - The data for the new promotion (e.g., { businessId: 3, position: \"3\", isApproved: true }).\r\n+ * @returns {Promise<object>} - A promise that resolves to the newly created promotion object.\r\n+ */\r\n+export const addPromotion = async (promotionData) => {\r\n+  return await apiFetch(\"/promotions/add\", {\r\n+    method: \"POST\",\r\n+    body: JSON.stringify(promotionData),\r\n+  });\r\n+};\r\n"
                }
            ],
            "date": 1748538257442,
            "name": "Commit-0",
            "content": "const API_BASE_URL = 'http://localhost:3000';\r\n\r\n// IMPORTANT: In a real application, the token should not be hardcoded here.\r\n// It should be managed securely, ideally obtained after login and stored\r\n// in a secure way (e.g., HttpOnly cookie, or managed via Auth Context/Redux).\r\n// For demonstration, we'll use the one provided.\r\nconst TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1vbmVzaHdhciIsInN1YiI6MTIsImlhdCI6MTc0ODQ5MzcwMSwiZXhwIjoxNzY0MDQ1NzAxfQ.R3lljEkXTBnfb4PErBdiSW-eWkfi-L6OKwyDQLnzWnw\";\r\n\r\n/**\r\n * A helper function to make fetch requests with common headers.\r\n * @param {string} endpoint - The API endpoint (e.g., '/user/count').\r\n * @param {object} options - Fetch options (method, body, etc.).\r\n * @returns {Promise<any>} - The JSON response from the API.\r\n */\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n  const headers = {\r\n    'Authorization': `Bearer ${TOKEN}`,\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({ message: 'Unknown error structure' }));\r\n    throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.message || response.statusText} for ${endpoint}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n/**\r\n * Fetches the total count of users.\r\n * @returns {Promise<number>} - The count of users.\r\n */\r\nexport const getUserCount = async () => {\r\n  const data = await apiFetch('/user/count');\r\n  return data.count !== undefined ? data.count : data; // Adjust based on your API response structure\r\n};\r\n\r\n/**\r\n * Fetches the total count of business partners.\r\n * @returns {Promise<number>} - The count of business partners.\r\n */\r\nexport const getBusinessPartnerCount = async () => {\r\n  const data = await apiFetch('/business-partner/count');\r\n  return data.count !== undefined ? data.count : data; // Adjust based on your API response structure\r\n};"
        }
    ]
}