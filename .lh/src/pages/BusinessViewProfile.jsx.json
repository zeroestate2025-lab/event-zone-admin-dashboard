{
    "sourceFile": "src/pages/BusinessViewProfile.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1749478553772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749478726187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,323 +1,323 @@\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useNavigate } from 'react-router-dom';\r\n-import '../styles/BusinessViewProfile.css';\r\n-import { getBusinessDetailsById, updateBusinessDetailsAPI } from '../services/apiService';\r\n+// import { useState, useEffect } from 'react';\r\n+// import { useParams, useNavigate } from 'react-router-dom';\r\n+// import '../styles/BusinessViewProfile.css';\r\n+// import { getBusinessDetailsById, updateBusinessDetailsAPI } from '../services/apiService';\r\n \r\n \r\n-function BusinessViewProfile({ isSidebarOpen }) {\r\n-  const { businessId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [initialFormData, setInitialFormData] = useState(null); // To store original fetched data for cancel\r\n+// function BusinessViewProfile({ isSidebarOpen }) {\r\n+//   const { businessId } = useParams();\r\n+//   const navigate = useNavigate();\r\n+//   const [initialFormData, setInitialFormData] = useState(null); // To store original fetched data for cancel\r\n \r\n-  if (!businessId) {\r\n-    return (\r\n-      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n-        <h1>Error</h1>\r\n-        <p>No Business ID provided in the URL.</p>\r\n-        <p>Please go back and select a valid business profile.</p>\r\n-        <button onClick={() => navigate(-1)} className=\"action-button error-back-button\">\r\n-          Back\r\n-        </button>\r\n-      </div>\r\n-    );\r\n-  }\r\n+//   if (!businessId) {\r\n+//     return (\r\n+//       <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+//         <h1>Error</h1>\r\n+//         <p>No Business ID provided in the URL.</p>\r\n+//         <p>Please go back and select a valid business profile.</p>\r\n+//         <button onClick={() => navigate(-1)} className=\"action-button error-back-button\">\r\n+//           Back\r\n+//         </button>\r\n+//       </div>\r\n+//     );\r\n+//   }\r\n \r\n-  // Initialize formData with a structure that matches your fields\r\n-  const [formData, setFormData] = useState({\r\n-    id: businessId, // Keep the ID from params\r\n-    businessName: \"\",\r\n-    proprietorName: \"\",\r\n-    price: \"\",\r\n-    serviceProvided: \"\",\r\n-    location: \"\",\r\n-    state: \"\", \r\n-    district: \"\",\r\n-    pincode: \"\",\r\n-    phoneNumber: \"\",\r\n-    email: \"\",\r\n-    moreDetails: \"\",\r\n-    isApproved: false,\r\n-    subCategories: [],\r\n-  });\r\n-  const [isEditing, setIsEditing] = useState(false);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [isSubmitting, setIsSubmitting] = useState(false);\r\n-  const [error, setError] = useState(null);\r\n-  const [successMessage, setSuccessMessage] = useState('');\r\n+//   // Initialize formData with a structure that matches your fields\r\n+//   const [formData, setFormData] = useState({\r\n+//     id: businessId, // Keep the ID from params\r\n+//     businessName: \"\",\r\n+//     proprietorName: \"\",\r\n+//     price: \"\",\r\n+//     serviceProvided: \"\",\r\n+//     location: \"\",\r\n+//     state: \"\", \r\n+//     district: \"\",\r\n+//     pincode: \"\",\r\n+//     phoneNumber: \"\",\r\n+//     email: \"\",\r\n+//     moreDetails: \"\",\r\n+//     isApproved: false,\r\n+//     subCategories: [],\r\n+//   });\r\n+//   const [isEditing, setIsEditing] = useState(false);\r\n+//   const [isLoading, setIsLoading] = useState(true);\r\n+//   const [isSubmitting, setIsSubmitting] = useState(false);\r\n+//   const [error, setError] = useState(null);\r\n+//   const [successMessage, setSuccessMessage] = useState('');\r\n \r\n-  useEffect(() => {\r\n-    if (businessId) {\r\n-      const fetchDetails = async () => {\r\n-        setIsLoading(true);\r\n-        setError(null);\r\n-        try {\r\n-          // In a real app, you'd call your actual API service function here\r\n-          const details = await getBusinessDetailsById(businessId);\r\n-          if (details) {\r\n-            setFormData(details);\r\n-          } else {\r\n-            setError(\"Business details not found or API returned no data.\");\r\n-          }\r\n-          setInitialFormData(details); // Store for cancel functionality\r\n-        } catch (err) {\r\n-          setError(err.message || \"Failed to fetch business details.\");\r\n-          console.error(\"API Error:\", err);\r\n-        } finally {\r\n-          setIsLoading(false);\r\n-        }\r\n-      };\r\n-      fetchDetails();\r\n-    }\r\n-  }, [businessId]);\r\n+//   useEffect(() => {\r\n+//     if (businessId) {\r\n+//       const fetchDetails = async () => {\r\n+//         setIsLoading(true);\r\n+//         setError(null);\r\n+//         try {\r\n+//           // In a real app, you'd call your actual API service function here\r\n+//           const details = await getBusinessDetailsById(businessId);\r\n+//           if (details) {\r\n+//             setFormData(details);\r\n+//           } else {\r\n+//             setError(\"Business details not found or API returned no data.\");\r\n+//           }\r\n+//           setInitialFormData(details); // Store for cancel functionality\r\n+//         } catch (err) {\r\n+//           setError(err.message || \"Failed to fetch business details.\");\r\n+//           console.error(\"API Error:\", err);\r\n+//         } finally {\r\n+//           setIsLoading(false);\r\n+//         }\r\n+//       };\r\n+//       fetchDetails();\r\n+//     }\r\n+//   }, [businessId]);\r\n \r\n-  const handleChange = (e) => {\r\n-    const { name, value, type, checked } = e.target;\r\n-    setFormData(prevData => {\r\n-      // Ensure subCategories remains an array if it's being directly edited (though not in this form setup)\r\n-      const newValue = type === 'checkbox' ? checked : value;\r\n-      return {\r\n-        ...prevData,\r\n-        [name]: newValue,\r\n-      };\r\n-    });\r\n-  };\r\n+//   const handleChange = (e) => {\r\n+//     const { name, value, type, checked } = e.target;\r\n+//     setFormData(prevData => {\r\n+//       // Ensure subCategories remains an array if it's being directly edited (though not in this form setup)\r\n+//       const newValue = type === 'checkbox' ? checked : value;\r\n+//       return {\r\n+//         ...prevData,\r\n+//         [name]: newValue,\r\n+//       };\r\n+//     });\r\n+//   };\r\n \r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setIsSubmitting(true);\r\n-    setError(null);\r\n-    setSuccessMessage('');\r\n-    try {\r\n-      // In a real app, call your update API service\r\n-      await updateBusinessDetailsAPI(businessId, formData);\r\n-      setSuccessMessage(\"Business details updated successfully!\");\r\n-      setInitialFormData(formData); // Update initial data to current after successful save\r\n-      setIsEditing(false);\r\n-    } catch (err) {\r\n-      setError(err.message || \"Failed to update business details.\");\r\n-      console.error(\"API Update Error:\", err);\r\n-      // alert(`Error: ${err.message || \"Failed to update business details.\"}`); // Avoid using alert for errors\r\n-    } finally {\r\n-      setIsSubmitting(false);\r\n-    }\r\n-  };\r\n+//   const handleSubmit = async (e) => {\r\n+//     e.preventDefault();\r\n+//     setIsSubmitting(true);\r\n+//     setError(null);\r\n+//     setSuccessMessage('');\r\n+//     try {\r\n+//       // In a real app, call your update API service\r\n+//       await updateBusinessDetailsAPI(businessId, formData);\r\n+//       setSuccessMessage(\"Business details updated successfully!\");\r\n+//       setInitialFormData(formData); // Update initial data to current after successful save\r\n+//       setIsEditing(false);\r\n+//     } catch (err) {\r\n+//       setError(err.message || \"Failed to update business details.\");\r\n+//       console.error(\"API Update Error:\", err);\r\n+//       // alert(`Error: ${err.message || \"Failed to update business details.\"}`); // Avoid using alert for errors\r\n+//     } finally {\r\n+//       setIsSubmitting(false);\r\n+//     }\r\n+//   };\r\n \r\n-  const handleBack = () => {\r\n-    navigate(-1);\r\n-  };\r\n-  const handleEdit = () => {\r\n-    if (isEditing && initialFormData) {\r\n-      setFormData(initialFormData); // Revert to original data on cancel\r\n-    }\r\n-    setIsEditing(!isEditing);\r\n-    setError(null); // Clear any previous errors when toggling edit mode\r\n-    setSuccessMessage('');\r\n-  };\r\n+//   const handleBack = () => {\r\n+//     navigate(-1);\r\n+//   };\r\n+//   const handleEdit = () => {\r\n+//     if (isEditing && initialFormData) {\r\n+//       setFormData(initialFormData); // Revert to original data on cancel\r\n+//     }\r\n+//     setIsEditing(!isEditing);\r\n+//     setError(null); // Clear any previous errors when toggling edit mode\r\n+//     setSuccessMessage('');\r\n+//   };\r\n \r\n-  const handleApprove = async () => {\r\n-    setIsSubmitting(true);\r\n-    setError(null);\r\n-    setSuccessMessage('');\r\n-    try {\r\n-      const updatedData = { ...formData, isApproved: true };\r\n-      await updateBusinessDetailsAPI(businessId, updatedData);\r\n-      setFormData(updatedData); // Update local state to reflect approval\r\n-      setInitialFormData(updatedData); // Update initial data as well\r\n-      setSuccessMessage(\"Business approved successfully!\");\r\n-      // Optionally, navigate away or disable the approve button\r\n-      // navigate('/pending-approvals'); // Or to business management\r\n-    } catch (err) {\r\n-      setError(err.message || \"Failed to approve business.\");\r\n-      console.error(\"API Approve Error:\", err);\r\n-    } finally {\r\n-      setIsSubmitting(false);\r\n-    }\r\n-  };\r\n+//   const handleApprove = async () => {\r\n+//     setIsSubmitting(true);\r\n+//     setError(null);\r\n+//     setSuccessMessage('');\r\n+//     try {\r\n+//       const updatedData = { ...formData, isApproved: true };\r\n+//       await updateBusinessDetailsAPI(businessId, updatedData);\r\n+//       setFormData(updatedData); // Update local state to reflect approval\r\n+//       setInitialFormData(updatedData); // Update initial data as well\r\n+//       setSuccessMessage(\"Business approved successfully!\");\r\n+//       // Optionally, navigate away or disable the approve button\r\n+//       // navigate('/pending-approvals'); // Or to business management\r\n+//     } catch (err) {\r\n+//       setError(err.message || \"Failed to approve business.\");\r\n+//       console.error(\"API Approve Error:\", err);\r\n+//     } finally {\r\n+//       setIsSubmitting(false);\r\n+//     }\r\n+//   };\r\n \r\n-  const editableFields = [\r\n-    { name: 'businessName', label: 'Business Name', type: 'text', placeholder: 'Enter business name' },\r\n-    { name: 'proprietorName', label: 'Proprietor Name', type: 'text', placeholder: 'Enter proprietor name' },\r\n-    { name: 'serviceProvided', label: 'Service Provided', type: 'text', placeholder: 'e.g., Wedding, Catering' },\r\n-    { name: 'price', label: 'Approx. Price (INR)', type: 'text', placeholder: 'e.g., 10000' },\r\n-    { name: 'phoneNumber', label: 'Phone Number', type: 'tel', placeholder: 'Enter 10-digit phone number' },\r\n-    { name: 'email', label: 'Email Address', type: 'email', placeholder: 'Enter contact email' },\r\n-    { name: 'location', label: 'Full Address', type: 'textarea', placeholder: 'Enter full street address' },\r\n-    { name: 'district', label: 'District', type: 'text', placeholder: 'e.g., Coimbatore' },\r\n-    { name: 'state', label: 'State', type: 'text', placeholder: 'e.g., Tamil Nadu' },\r\n-    { name: 'pincode', label: 'Pincode', type: 'text', placeholder: 'e.g., 641004' },\r\n-    { name: 'moreDetails', label: 'Additional Details & Features', type: 'textarea', placeholder: 'Enter seating capacity, AC/Non-AC, catering options, etc.' },\r\n-    { name: 'isApproved', label: 'Approval Status', type: 'checkbox' },\r\n-  ];\r\n+//   const editableFields = [\r\n+//     { name: 'businessName', label: 'Business Name', type: 'text', placeholder: 'Enter business name' },\r\n+//     { name: 'proprietorName', label: 'Proprietor Name', type: 'text', placeholder: 'Enter proprietor name' },\r\n+//     { name: 'serviceProvided', label: 'Service Provided', type: 'text', placeholder: 'e.g., Wedding, Catering' },\r\n+//     { name: 'price', label: 'Approx. Price (INR)', type: 'text', placeholder: 'e.g., 10000' },\r\n+//     { name: 'phoneNumber', label: 'Phone Number', type: 'tel', placeholder: 'Enter 10-digit phone number' },\r\n+//     { name: 'email', label: 'Email Address', type: 'email', placeholder: 'Enter contact email' },\r\n+//     { name: 'location', label: 'Full Address', type: 'textarea', placeholder: 'Enter full street address' },\r\n+//     { name: 'district', label: 'District', type: 'text', placeholder: 'e.g., Coimbatore' },\r\n+//     { name: 'state', label: 'State', type: 'text', placeholder: 'e.g., Tamil Nadu' },\r\n+//     { name: 'pincode', label: 'Pincode', type: 'text', placeholder: 'e.g., 641004' },\r\n+//     { name: 'moreDetails', label: 'Additional Details & Features', type: 'textarea', placeholder: 'Enter seating capacity, AC/Non-AC, catering options, etc.' },\r\n+//     { name: 'isApproved', label: 'Approval Status', type: 'checkbox' },\r\n+//   ];\r\n \r\n-  if (isLoading) {\r\n-    return (\r\n-      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n-        <div className=\"profile-view-header\">\r\n-          <h1 className=\"header-main-title\">Loading Business Profile...</h1>\r\n-        </div>\r\n-        <p style={{ textAlign: 'center' }}>Fetching details, please wait...</p>\r\n-      </div>\r\n-    );\r\n-  }\r\n+//   if (isLoading) {\r\n+//     return (\r\n+//       <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+//         <div className=\"profile-view-header\">\r\n+//           <h1 className=\"header-main-title\">Loading Business Profile...</h1>\r\n+//         </div>\r\n+//         <p style={{ textAlign: 'center' }}>Fetching details, please wait...</p>\r\n+//       </div>\r\n+//     );\r\n+//   }\r\n \r\n-  if (error && !isEditing) { // Show main error if not in editing mode (where field-specific errors might be shown)\r\n-    return (\r\n-      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n-        <div className=\"profile-view-header\">\r\n-          <h1 className=\"header-main-title\">Error</h1>\r\n-        </div>\r\n-        <p style={{ textAlign: 'center', color: 'red' }}>{error}</p>\r\n-        <button onClick={handleBack} className=\"action-button error-back-button\">\r\n-          Back\r\n-        </button>\r\n-      </div>\r\n-    );\r\n-  }\r\n+//   if (error && !isEditing) { // Show main error if not in editing mode (where field-specific errors might be shown)\r\n+//     return (\r\n+//       <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+//         <div className=\"profile-view-header\">\r\n+//           <h1 className=\"header-main-title\">Error</h1>\r\n+//         </div>\r\n+//         <p style={{ textAlign: 'center', color: 'red' }}>{error}</p>\r\n+//         <button onClick={handleBack} className=\"action-button error-back-button\">\r\n+//           Back\r\n+//         </button>\r\n+//       </div>\r\n+//     );\r\n+//   }\r\n \r\n-  return (\r\n-    <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n-      <div className=\"profile-view-header\">\r\n-        <button type=\"button\" className=\"header-action-button back-button-header\" onClick={handleBack}>\r\n-          ← Back\r\n-        </button>\r\n-        <h1 className=\"header-main-title\">Business Profile</h1>\r\n-        <button type=\"button\" className=\"header-action-button edit-button-header\" onClick={handleEdit} disabled={isLoading || isSubmitting}>\r\n-          {isEditing ? 'Cancel' : 'Edit'}\r\n-        </button>\r\n-      </div>\r\n+//   return (\r\n+//     <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+//       <div className=\"profile-view-header\">\r\n+//         <button type=\"button\" className=\"header-action-button back-button-header\" onClick={handleBack}>\r\n+//           ← Back\r\n+//         </button>\r\n+//         <h1 className=\"header-main-title\">Business Profile</h1>\r\n+//         <button type=\"button\" className=\"header-action-button edit-button-header\" onClick={handleEdit} disabled={isLoading || isSubmitting}>\r\n+//           {isEditing ? 'Cancel' : 'Edit'}\r\n+//         </button>\r\n+//       </div>\r\n \r\n-      {successMessage && <p style={{ color: 'green', textAlign: 'center', marginTop: '10px' }}>{successMessage}</p>}\r\n-      {/* Error message display is already handled below if error and !isEditing */}\r\n+//       {successMessage && <p style={{ color: 'green', textAlign: 'center', marginTop: '10px' }}>{successMessage}</p>}\r\n+//       {/* Error message display is already handled below if error and !isEditing */}\r\n \r\n-      <form onSubmit={handleSubmit} className=\"profile-form\">\r\n-        {/* Basic Information */}\r\n-        <fieldset className=\"form-section\">\r\n-          <legend>Basic Information</legend>\r\n-          <div className=\"form-row-grid\">\r\n-            {renderField('businessName')}\r\n-            {renderField('proprietorName')}\r\n-            {renderField('serviceProvided')}\r\n-            {renderField('price')}\r\n-          </div>\r\n-        </fieldset>\r\n+//       <form onSubmit={handleSubmit} className=\"profile-form\">\r\n+//         {/* Basic Information */}\r\n+//         <fieldset className=\"form-section\">\r\n+//           <legend>Basic Information</legend>\r\n+//           <div className=\"form-row-grid\">\r\n+//             {renderField('businessName')}\r\n+//             {renderField('proprietorName')}\r\n+//             {renderField('serviceProvided')}\r\n+//             {renderField('price')}\r\n+//           </div>\r\n+//         </fieldset>\r\n \r\n-        {/* Contact Information */}\r\n-        <fieldset className=\"form-section\">\r\n-          <legend>Contact Information</legend>\r\n-          <div className=\"form-row-grid\">\r\n-            {renderField('phoneNumber')}\r\n-            {renderField('email')}\r\n-          </div>\r\n-        </fieldset>\r\n+//         {/* Contact Information */}\r\n+//         <fieldset className=\"form-section\">\r\n+//           <legend>Contact Information</legend>\r\n+//           <div className=\"form-row-grid\">\r\n+//             {renderField('phoneNumber')}\r\n+//             {renderField('email')}\r\n+//           </div>\r\n+//         </fieldset>\r\n \r\n-        {/* Location Information */}\r\n-        <fieldset className=\"form-section\">\r\n-          <legend>Location Information</legend>\r\n-          {renderField('location')}\r\n-          <div className=\"form-row-grid\">\r\n-            {renderField('district')}\r\n-            {renderField('state')}\r\n-            {renderField('pincode')}\r\n-          </div>\r\n-        </fieldset>\r\n+//         {/* Location Information */}\r\n+//         <fieldset className=\"form-section\">\r\n+//           <legend>Location Information</legend>\r\n+//           {renderField('location')}\r\n+//           <div className=\"form-row-grid\">\r\n+//             {renderField('district')}\r\n+//             {renderField('state')}\r\n+//             {renderField('pincode')}\r\n+//           </div>\r\n+//         </fieldset>\r\n \r\n-        {/* Additional Details */}\r\n-        <fieldset className=\"form-section\">\r\n-          <legend>Additional Details</legend>\r\n-          {renderField('moreDetails')}\r\n-          <div className=\"form-group\">\r\n-            <label>Sub-Categories:</label>\r\n-            {/* Display subCategories. If they need to be editable, this part would need a more complex input. */}\r\n-            <span>\r\n-              {Array.isArray(formData.subCategories) && formData.subCategories.length > 0\r\n-                ? formData.subCategories.join(', ')\r\n-                : 'N/A'}\r\n-            </span>\r\n-          </div>\r\n-        </fieldset>\r\n+//         {/* Additional Details */}\r\n+//         <fieldset className=\"form-section\">\r\n+//           <legend>Additional Details</legend>\r\n+//           {renderField('moreDetails')}\r\n+//           <div className=\"form-group\">\r\n+//             <label>Sub-Categories:</label>\r\n+//             {/* Display subCategories. If they need to be editable, this part would need a more complex input. */}\r\n+//             <span>\r\n+//               {Array.isArray(formData.subCategories) && formData.subCategories.length > 0\r\n+//                 ? formData.subCategories.join(', ')\r\n+//                 : 'N/A'}\r\n+//             </span>\r\n+//           </div>\r\n+//         </fieldset>\r\n \r\n-        {/* Admin Controls */}\r\n-        <fieldset className=\"form-section\">\r\n-          <legend>Admin Controls</legend>\r\n-          {renderField('isApproved')}\r\n-        </fieldset>\r\n+//         {/* Admin Controls */}\r\n+//         <fieldset className=\"form-section\">\r\n+//           <legend>Admin Controls</legend>\r\n+//           {renderField('isApproved')}\r\n+//         </fieldset>\r\n \r\n-        {!formData.isApproved && !isEditing && (\r\n-          <div className=\"form-actions\" style={{ justifyContent: 'center', borderTop: 'none', paddingTop: '10px' }}>\r\n-            <button\r\n-              type=\"button\"\r\n-              onClick={handleApprove}\r\n-              className=\"action-button submit-button\" // You might want a different class for approve\r\n-              disabled={isSubmitting}\r\n-            >\r\n-              {isSubmitting ? 'Approving...' : 'Approve Business'}\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-        {isEditing && (\r\n-          <div className=\"form-actions\">\r\n-            <button type=\"submit\" className=\"action-button submit-button\" disabled={isSubmitting || isLoading}>\r\n-              {isSubmitting ? 'Saving...' : 'Save Changes'}\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-        {error && isEditing && ( // Show error message below save button if in edit mode\r\n-          <p style={{ textAlign: 'center', color: 'red', marginTop: '10px' }}>Error: {error}</p>\r\n-        )}\r\n-      </form>\r\n-    </div>\r\n-  );\r\n+//         {!formData.isApproved && !isEditing && (\r\n+//           <div className=\"form-actions\" style={{ justifyContent: 'center', borderTop: 'none', paddingTop: '10px' }}>\r\n+//             <button\r\n+//               type=\"button\"\r\n+//               onClick={handleApprove}\r\n+//               className=\"action-button submit-button\" // You might want a different class for approve\r\n+//               disabled={isSubmitting}\r\n+//             >\r\n+//               {isSubmitting ? 'Approving...' : 'Approve Business'}\r\n+//             </button>\r\n+//           </div>\r\n+//         )}\r\n+//         {isEditing && (\r\n+//           <div className=\"form-actions\">\r\n+//             <button type=\"submit\" className=\"action-button submit-button\" disabled={isSubmitting || isLoading}>\r\n+//               {isSubmitting ? 'Saving...' : 'Save Changes'}\r\n+//             </button>\r\n+//           </div>\r\n+//         )}\r\n+//         {error && isEditing && ( // Show error message below save button if in edit mode\r\n+//           <p style={{ textAlign: 'center', color: 'red', marginTop: '10px' }}>Error: {error}</p>\r\n+//         )}\r\n+//       </form>\r\n+//     </div>\r\n+//   );\r\n \r\n-  function renderField(fieldName) {\r\n-    const field = editableFields.find(f => f.name === fieldName);\r\n-    if (!field) return null;\r\n+//   function renderField(fieldName) {\r\n+//     const field = editableFields.find(f => f.name === fieldName);\r\n+//     if (!field) return null;\r\n \r\n-    return (\r\n-      <div className={`form-group ${field.type === 'textarea' ? 'textarea-full-width' : ''}`} key={field.name}>\r\n-        <label htmlFor={field.name}>{field.label}</label>\r\n-        {!isEditing ? (\r\n-          <span>\r\n-            {field.type === 'checkbox'\r\n-              ? (formData[field.name] ? 'Yes' : 'No')\r\n-              : (formData[field.name] || 'N/A')}\r\n-          </span>\r\n-        ) : field.type === 'textarea' ? (\r\n-            <textarea\r\n-              id={field.name}\r\n-              name={field.name}\r\n-              value={formData[field.name] || ''}\r\n-              onChange={handleChange}\r\n-              placeholder={field.placeholder}\r\n-              rows={field.name === 'location' ? 3 : (field.name === 'moreDetails' ? 5 : 4)}\r\n-              disabled={isSubmitting}\r\n-            />\r\n-          ) : field.type === 'checkbox' ? (\r\n-            <div className=\"checkbox-wrapper\">\r\n-              <input\r\n-                type=\"checkbox\"\r\n-                id={field.name}\r\n-                name={field.name}\r\n-                checked={Boolean(formData[field.name])} // Ensure it's a boolean\r\n-                onChange={handleChange}\r\n-                className=\"form-checkbox\"\r\n-                disabled={isSubmitting}\r\n-              />\r\n-            </div>\r\n-          ) : (\r\n-            <input\r\n-              type={field.type}\r\n-              id={field.name}\r\n-              name={field.name}\r\n-              value={formData[field.name] || ''}\r\n-              onChange={handleChange}\r\n-              placeholder={field.placeholder}\r\n-              disabled={isSubmitting}\r\n-            />\r\n-          )\r\n-        }\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n+//     return (\r\n+//       <div className={`form-group ${field.type === 'textarea' ? 'textarea-full-width' : ''}`} key={field.name}>\r\n+//         <label htmlFor={field.name}>{field.label}</label>\r\n+//         {!isEditing ? (\r\n+//           <span>\r\n+//             {field.type === 'checkbox'\r\n+//               ? (formData[field.name] ? 'Yes' : 'No')\r\n+//               : (formData[field.name] || 'N/A')}\r\n+//           </span>\r\n+//         ) : field.type === 'textarea' ? (\r\n+//             <textarea\r\n+//               id={field.name}\r\n+//               name={field.name}\r\n+//               value={formData[field.name] || ''}\r\n+//               onChange={handleChange}\r\n+//               placeholder={field.placeholder}\r\n+//               rows={field.name === 'location' ? 3 : (field.name === 'moreDetails' ? 5 : 4)}\r\n+//               disabled={isSubmitting}\r\n+//             />\r\n+//           ) : field.type === 'checkbox' ? (\r\n+//             <div className=\"checkbox-wrapper\">\r\n+//               <input\r\n+//                 type=\"checkbox\"\r\n+//                 id={field.name}\r\n+//                 name={field.name}\r\n+//                 checked={Boolean(formData[field.name])} // Ensure it's a boolean\r\n+//                 onChange={handleChange}\r\n+//                 className=\"form-checkbox\"\r\n+//                 disabled={isSubmitting}\r\n+//               />\r\n+//             </div>\r\n+//           ) : (\r\n+//             <input\r\n+//               type={field.type}\r\n+//               id={field.name}\r\n+//               name={field.name}\r\n+//               value={formData[field.name] || ''}\r\n+//               onChange={handleChange}\r\n+//               placeholder={field.placeholder}\r\n+//               disabled={isSubmitting}\r\n+//             />\r\n+//           )\r\n+//         }\r\n+//       </div>\r\n+//     );\r\n+//   }\r\n+// }\r\n \r\n-export default BusinessViewProfile;\r\n+// export default BusinessViewProfile;\r\n"
                },
                {
                    "date": 1749484788828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,372 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useNavigate } from 'react-router-dom';\r\n+import '../styles/BusinessViewProfile.css';\r\n+import { getBusinessDetailsById, updateBusinessDetailsAPI } from '../services/apiService';\r\n+\r\n+function BusinessViewProfile({ isSidebarOpen }) {\r\n+  const { businessId } = useParams(); // Extracts ID from URL, e.g., \"1\", \"12\"\r\n+  const navigate = useNavigate();\r\n+\r\n+  // State for the form data, initialized with a structure\r\n+  const [formData, setFormData] = useState({\r\n+    id: businessId, // Store the ID from params\r\n+    businessName: \"\",\r\n+    proprietorName: \"\",\r\n+    price: \"\",\r\n+    serviceProvided: \"\",\r\n+    location: \"\",\r\n+    state: \"\",\r\n+    district: \"\",\r\n+    pincode: \"\",\r\n+    phoneNumber: \"\",\r\n+    email: \"\",\r\n+    moreDetails: \"\",\r\n+    isApproved: false,\r\n+    subCategories: [], // Ensure this is an array\r\n+  });\r\n+  const [initialFormData, setInitialFormData] = useState(null); // To store original fetched data for cancel\r\n+  const [isEditing, setIsEditing] = useState(false);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const [isSubmitting, setIsSubmitting] = useState(false);\r\n+  const [error, setError] = useState(null);\r\n+  const [successMessage, setSuccessMessage] = useState('');\r\n+\r\n+  // Validate businessId early\r\n+  if (!businessId || isNaN(parseInt(businessId))) {\r\n+    return (\r\n+      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+        <div className=\"profile-view-header\">\r\n+            <h1 className=\"header-main-title\">Invalid Business ID</h1>\r\n+        </div>\r\n+        <p style={{ textAlign: 'center', color: 'red', marginTop: '20px' }}>\r\n+            No valid Business ID provided in the URL.\r\n+        </p>\r\n+        <p style={{ textAlign: 'center' }}>Please go back and select a valid business profile.</p>\r\n+        <button onClick={() => navigate(-1)} className=\"action-button error-back-button\" style={{ display: 'block', margin: '20px auto' }}>\r\n+          Back\r\n+        </button>\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const fetchDetails = async () => {\r\n+      setIsLoading(true);\r\n+      setError(null);\r\n+      setSuccessMessage('');\r\n+      try {\r\n+        console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n+        const details = await getBusinessDetailsById(businessId); // This calls your apiService\r\n+        console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n+\r\n+        if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n+          // Map API response to formData structure, handling potential key differences\r\n+          const mappedDetails = {\r\n+            id: details.id || businessId,\r\n+            businessName: details.businessName || details.BusinessName || details.business_name || \"\",\r\n+            proprietorName: details.proprietorName || details.ProprietorName || details.proprietor_name || \"\",\r\n+            price: details.price !== undefined ? String(details.price) : \"\", // Ensure price is a string for the form\r\n+            serviceProvided: details.serviceProvided || details.ServiceProvided || details.service_provided || \"\",\r\n+            location: details.location || \"\",\r\n+            state: details.state || \"\",\r\n+            district: details.district || \"\",\r\n+            pincode: details.pincode || \"\",\r\n+            phoneNumber: details.phoneNumber || details.PhoneNumber || details.phone_number || \"\",\r\n+            email: details.email || \"\",\r\n+            moreDetails: details.moreDetails || details.MoreDetails || details.more_details || \"\",\r\n+            // Ensure isApproved is explicitly a boolean\r\n+            isApproved: typeof details.isApproved === 'boolean' ? details.isApproved : (typeof details.IsApproved === 'boolean' ? details.IsApproved : (typeof details.is_approved === 'boolean' ? details.is_approved : false)),\r\n+            // Ensure subCategories is always an array\r\n+            subCategories: Array.isArray(details.subCategories) ? details.subCategories : (Array.isArray(details.SubCategories) ? details.SubCategories : (Array.isArray(details.sub_categories) ? details.sub_categories : [])),\r\n+            // Add any other fields from your API that need to be displayed/edited\r\n+          };\r\n+          setFormData(mappedDetails);\r\n+          setInitialFormData(mappedDetails); // Store for cancel functionality\r\n+        } else {\r\n+          console.warn(\"Business details not found or API returned empty/invalid data for ID:\", businessId, \"Received:\", details);\r\n+          setError(`Business details not found for ID: ${businessId}.`);\r\n+          setFormData(prev => ({ ...prev, id: businessId })); // Keep ID but clear other fields if needed\r\n+          setInitialFormData(null);\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(`API Error fetching details for ID ${businessId}:`, err);\r\n+        setError(err.message || \"Failed to fetch business details.\");\r\n+        setInitialFormData(null);\r\n+      } finally {\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+    fetchDetails();\r\n+  }, [businessId]); // Re-fetch if businessId changes\r\n+\r\n+  const handleChange = (e) => {\r\n+    const { name, value, type, checked } = e.target;\r\n+    setFormData(prevData => ({\r\n+      ...prevData,\r\n+      [name]: type === 'checkbox' ? checked : value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setIsSubmitting(true);\r\n+    setError(null);\r\n+    setSuccessMessage('');\r\n+    try {\r\n+      await updateBusinessDetailsAPI(businessId, formData); // This calls your apiService\r\n+      setSuccessMessage(\"Business details updated successfully!\");\r\n+      setInitialFormData(formData); // Update initial data to current after successful save\r\n+      setIsEditing(false);\r\n+    } catch (err) {\r\n+      console.error(\"API Update Error:\", err);\r\n+      setError(err.message || \"Failed to update business details.\");\r\n+    } finally {\r\n+      setIsSubmitting(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleBack = () => {\r\n+    navigate(-1); // Navigates to the previous page in history\r\n+  };\r\n+\r\n+  const handleEditToggle = () => {\r\n+    if (isEditing && initialFormData) {\r\n+      setFormData(initialFormData); // Revert to original data on cancel\r\n+    }\r\n+    setIsEditing(!isEditing);\r\n+    setError(null); // Clear any previous errors when toggling edit mode\r\n+    setSuccessMessage('');\r\n+  };\r\n+\r\n+  const handleApprove = async () => {\r\n+    setIsSubmitting(true);\r\n+    setError(null);\r\n+    setSuccessMessage('');\r\n+    try {\r\n+      const updatedData = { ...formData, isApproved: true };\r\n+      await updateBusinessDetailsAPI(businessId, updatedData); // This calls your apiService\r\n+      setFormData(updatedData); // Update local state to reflect approval\r\n+      setInitialFormData(updatedData); // Update initial data as well\r\n+      setSuccessMessage(\"Business approved successfully!\");\r\n+    } catch (err) {\r\n+      console.error(\"API Approve Error:\", err);\r\n+      setError(err.message || \"Failed to approve business.\");\r\n+    } finally {\r\n+      setIsSubmitting(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Define fields for rendering\r\n+  const editableFields = [\r\n+    { name: 'businessName', label: 'Business Name', type: 'text', placeholder: 'Enter business name' },\r\n+    { name: 'proprietorName', label: 'Proprietor Name', type: 'text', placeholder: 'Enter proprietor name' },\r\n+    { name: 'serviceProvided', label: 'Service Provided', type: 'text', placeholder: 'e.g., Wedding, Catering' },\r\n+    { name: 'price', label: 'Approx. Price (INR)', type: 'text', placeholder: 'e.g., 10000' },\r\n+    { name: 'phoneNumber', label: 'Phone Number', type: 'tel', placeholder: 'Enter 10-digit phone number' },\r\n+    { name: 'email', label: 'Email Address', type: 'email', placeholder: 'Enter contact email' },\r\n+    { name: 'location', label: 'Full Address', type: 'textarea', placeholder: 'Enter full street address' },\r\n+    { name: 'district', label: 'District', type: 'text', placeholder: 'e.g., Coimbatore' },\r\n+    { name: 'state', label: 'State', type: 'text', placeholder: 'e.g., Tamil Nadu' },\r\n+    { name: 'pincode', label: 'Pincode', type: 'text', placeholder: 'e.g., 641004' },\r\n+    { name: 'moreDetails', label: 'Additional Details & Features', type: 'textarea', placeholder: 'Enter seating capacity, AC/Non-AC, catering options, etc.' },\r\n+    { name: 'isApproved', label: 'Approval Status', type: 'checkbox' },\r\n+  ];\r\n+\r\n+  // Helper function to render form fields or display text\r\n+  function renderField(fieldName) {\r\n+    const field = editableFields.find(f => f.name === fieldName);\r\n+    if (!field) return null;\r\n+\r\n+    const value = formData[field.name];\r\n+\r\n+    return (\r\n+      <div className={`form-group ${field.type === 'textarea' ? 'textarea-full-width' : ''}`} key={field.name}>\r\n+        <label htmlFor={field.name}>{field.label}</label>\r\n+        {!isEditing ? (\r\n+          <span>\r\n+            {field.type === 'checkbox'\r\n+              ? (value ? 'Yes' : 'No')\r\n+              : (value !== null && value !== undefined && value !== '' ? String(value) : 'N/A')}\r\n+          </span>\r\n+        ) : field.type === 'textarea' ? (\r\n+            <textarea\r\n+              id={field.name}\r\n+              name={field.name}\r\n+              value={value || ''}\r\n+              onChange={handleChange}\r\n+              placeholder={field.placeholder}\r\n+              rows={field.name === 'location' ? 3 : (field.name === 'moreDetails' ? 5 : 4)}\r\n+              disabled={isSubmitting}\r\n+            />\r\n+          ) : field.type === 'checkbox' ? (\r\n+            <div className=\"checkbox-wrapper\">\r\n+              <input\r\n+                type=\"checkbox\"\r\n+                id={field.name}\r\n+                name={field.name}\r\n+                checked={Boolean(value)}\r\n+                onChange={handleChange}\r\n+                className=\"form-checkbox\"\r\n+                disabled={isSubmitting}\r\n+              />\r\n+            </div>\r\n+          ) : (\r\n+            <input\r\n+              type={field.type}\r\n+              id={field.name}\r\n+              name={field.name}\r\n+              value={value || ''}\r\n+              onChange={handleChange}\r\n+              placeholder={field.placeholder}\r\n+              disabled={isSubmitting}\r\n+            />\r\n+          )\r\n+        }\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  if (isLoading) {\r\n+    return (\r\n+      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+        <div className=\"profile-view-header\">\r\n+          <h1 className=\"header-main-title\">Loading Business Profile...</h1>\r\n+        </div>\r\n+        <p style={{ textAlign: 'center', marginTop: '20px' }}>Fetching details, please wait...</p>\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  // If there was an error and we don't have initial form data (meaning fetch failed critically)\r\n+  if (error && !initialFormData) {\r\n+    return (\r\n+      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+        <div className=\"profile-view-header\">\r\n+          <h1 className=\"header-main-title\">Error</h1>\r\n+        </div>\r\n+        <p style={{ textAlign: 'center', color: 'red', marginTop: '20px' }}>{error}</p>\r\n+        <button onClick={handleBack} className=\"action-button error-back-button\" style={{ display: 'block', margin: '20px auto' }}>\r\n+          Back\r\n+        </button>\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+\r\n+  return (\r\n+    <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+      <div className=\"profile-view-header\">\r\n+        <button type=\"button\" className=\"header-action-button back-button-header\" onClick={handleBack}>\r\n+          ← Back\r\n+        </button>\r\n+        <h1 className=\"header-main-title\">Business Profile</h1>\r\n+        <button type=\"button\" className=\"header-action-button edit-button-header\" onClick={handleEditToggle} disabled={isLoading || isSubmitting || !initialFormData /* Disable if initial fetch failed */}>\r\n+          {isEditing ? 'Cancel' : 'Edit'}\r\n+        </button>\r\n+      </div>\r\n+\r\n+      {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n+      {/* Display general error if not in edit mode, or if initial fetch failed and we are trying to edit */}\r\n+      {error && (!isEditing || (isEditing && !initialFormData)) && <p className=\"error-message\">{error}</p>}\r\n+\r\n+\r\n+      {initialFormData ? ( // Only render form if initial data was successfully fetched\r\n+        <form onSubmit={handleSubmit} className=\"profile-form\">\r\n+          <fieldset className=\"form-section\">\r\n+            <legend>Basic Information</legend>\r\n+            <div className=\"form-row-grid\">\r\n+              {renderField('businessName')}\r\n+              {renderField('proprietorName')}\r\n+              {renderField('serviceProvided')}\r\n+              {renderField('price')}\r\n+            </div>\r\n+          </fieldset>\r\n+\r\n+          <fieldset className=\"form-section\">\r\n+            <legend>Contact Information</legend>\r\n+            <div className=\"form-row-grid\">\r\n+              {renderField('phoneNumber')}\r\n+              {renderField('email')}\r\n+            </div>\r\n+          </fieldset>\r\n+\r\n+          <fieldset className=\"form-section\">\r\n+            <legend>Location Information</legend>\r\n+            {renderField('location')}\r\n+            <div className=\"form-row-grid\">\r\n+              {renderField('district')}\r\n+              {renderField('state')}\r\n+              {renderField('pincode')}\r\n+            </div>\r\n+          </fieldset>\r\n+\r\n+          <fieldset className=\"form-section\">\r\n+            <legend>Additional Details</legend>\r\n+            {renderField('moreDetails')}\r\n+            <div className=\"form-group\">\r\n+              <label>Sub-Categories:</label>\r\n+              {!isEditing ? (\r\n+                <span>\r\n+                  {Array.isArray(formData.subCategories) && formData.subCategories.length > 0\r\n+                    ? formData.subCategories.join(', ')\r\n+                    : 'N/A'}\r\n+                </span>\r\n+              ) : (\r\n+                <input \r\n+                  type=\"text\" \r\n+                  name=\"subCategories\" \r\n+                  value={Array.isArray(formData.subCategories) ? formData.subCategories.join(', ') : ''} \r\n+                  onChange={(e) => setFormData(prev => ({...prev, subCategories: e.target.value.split(',').map(s => s.trim()).filter(s => s)}))}\r\n+                  placeholder=\"Enter sub-categories, comma-separated\"\r\n+                  disabled={isSubmitting}\r\n+                />\r\n+                // For a better UX, consider a tag input component for subCategories\r\n+              )}\r\n+            </div>\r\n+          </fieldset>\r\n+\r\n+          <fieldset className=\"form-section\">\r\n+            <legend>Admin Controls</legend>\r\n+            {renderField('isApproved')}\r\n+          </fieldset>\r\n+\r\n+          {!formData.isApproved && !isEditing && (\r\n+            <div className=\"form-actions centered-actions\">\r\n+              <button\r\n+                type=\"button\"\r\n+                onClick={handleApprove}\r\n+                className=\"action-button approve-button\"\r\n+                disabled={isSubmitting}\r\n+              >\r\n+                {isSubmitting ? 'Approving...' : 'Approve Business'}\r\n+              </button>\r\n+            </div>\r\n+          )}\r\n+          {isEditing && (\r\n+            <div className=\"form-actions\">\r\n+              <button type=\"submit\" className=\"action-button submit-button\" disabled={isSubmitting || isLoading}>\r\n+                {isSubmitting ? 'Saving...' : 'Save Changes'}\r\n+              </button>\r\n+            </div>\r\n+          )}\r\n+          {/* Display error during editing if it occurs on submit */}\r\n+          {error && isEditing && <p className=\"error-message\" style={{ marginTop: '10px' }}>{error}</p>}\r\n+        </form>\r\n+      ) : (\r\n+        // This part is shown if initialFormData is null and not loading,\r\n+        // which means the initial fetch failed but didn't set a general error message\r\n+        // that prevented rendering (e.g. API returned null or empty object).\r\n+        !isLoading && <p className=\"error-message\">Could not load business details. Please try again or contact support.</p>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default BusinessViewProfile;\r\n+\r\n+\r\n+\r\n // import { useState, useEffect } from 'react';\r\n // import { useParams, useNavigate } from 'react-router-dom';\r\n // import '../styles/BusinessViewProfile.css';\r\n // import { getBusinessDetailsById, updateBusinessDetailsAPI } from '../services/apiService';\r\n"
                },
                {
                    "date": 1749484949654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             phoneNumber: details.phoneNumber || details.PhoneNumber || details.phone_number || \"\",\r\n             email: details.email || \"\",\r\n             moreDetails: details.moreDetails || details.MoreDetails || details.more_details || \"\",\r\n             // Ensure isApproved is explicitly a boolean\r\n-            isApproved: typeof details.isApproved === 'boolean' ? details.isApproved : (typeof details.IsApproved === 'boolean' ? details.IsApproved : (typeof details.is_approved === 'boolean' ? details.is_approved : false)),\r\n+            // isApproved: typeof details.isApproved === 'boolean' ? details.isApproved : (typeof details.IsApproved === 'boolean' ? details.IsApproved : (typeof details.is_approved === 'boolean' ? details.is_approved : false)),\r\n             // Ensure subCategories is always an array\r\n             subCategories: Array.isArray(details.subCategories) ? details.subCategories : (Array.isArray(details.SubCategories) ? details.SubCategories : (Array.isArray(details.sub_categories) ? details.sub_categories : [])),\r\n             // Add any other fields from your API that need to be displayed/edited\r\n           };\r\n"
                },
                {
                    "date": 1749484974197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             phoneNumber: details.phoneNumber || details.PhoneNumber || details.phone_number || \"\",\r\n             email: details.email || \"\",\r\n             moreDetails: details.moreDetails || details.MoreDetails || details.more_details || \"\",\r\n             // Ensure isApproved is explicitly a boolean\r\n-            // isApproved: typeof details.isApproved === 'boolean' ? details.isApproved : (typeof details.IsApproved === 'boolean' ? details.IsApproved : (typeof details.is_approved === 'boolean' ? details.is_approved : false)),\r\n+            isApproved: typeof details.isApproved === 'boolean' ? details.isApproved : (typeof details.IsApproved === 'boolean' ? details.IsApproved : (typeof details.is_approved === 'boolean' ? details.is_approved : false)),\r\n             // Ensure subCategories is always an array\r\n             subCategories: Array.isArray(details.subCategories) ? details.subCategories : (Array.isArray(details.SubCategories) ? details.SubCategories : (Array.isArray(details.sub_categories) ? details.sub_categories : [])),\r\n             // Add any other fields from your API that need to be displayed/edited\r\n           };\r\n"
                },
                {
                    "date": 1749485330507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n     email: \"\",\r\n     moreDetails: \"\",\r\n     isApproved: false,\r\n     subCategories: [], // Ensure this is an array\r\n+    aproxLatitude: \"\", // Added from sample\r\n+    aproxLongitude: \"\", // Added from sample\r\n   });\r\n   const [initialFormData, setInitialFormData] = useState(null); // To store original fetched data for cancel\r\n   const [isEditing, setIsEditing] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n@@ -66,20 +68,21 @@\n             businessName: details.businessName || details.BusinessName || details.business_name || \"\",\r\n             proprietorName: details.proprietorName || details.ProprietorName || details.proprietor_name || \"\",\r\n             price: details.price !== undefined ? String(details.price) : \"\", // Ensure price is a string for the form\r\n             serviceProvided: details.serviceProvided || details.ServiceProvided || details.service_provided || \"\",\r\n-            location: details.location || \"\",\r\n-            state: details.state || \"\",\r\n-            district: details.district || \"\",\r\n-            pincode: details.pincode || \"\",\r\n+            location: details.location || details.Location || \"\",\r\n+            state: details.state || details.State || \"\",\r\n+            district: details.district || details.District || \"\",\r\n+            pincode: details.pincode || details.Pincode || \"\",\r\n             phoneNumber: details.phoneNumber || details.PhoneNumber || details.phone_number || \"\",\r\n             email: details.email || \"\",\r\n             moreDetails: details.moreDetails || details.MoreDetails || details.more_details || \"\",\r\n             // Ensure isApproved is explicitly a boolean\r\n             isApproved: typeof details.isApproved === 'boolean' ? details.isApproved : (typeof details.IsApproved === 'boolean' ? details.IsApproved : (typeof details.is_approved === 'boolean' ? details.is_approved : false)),\r\n             // Ensure subCategories is always an array\r\n             subCategories: Array.isArray(details.subCategories) ? details.subCategories : (Array.isArray(details.SubCategories) ? details.SubCategories : (Array.isArray(details.sub_categories) ? details.sub_categories : [])),\r\n-            // Add any other fields from your API that need to be displayed/edited\r\n+            aproxLatitude: details.aproxLatitude !== undefined ? String(details.aproxLatitude) : \"\",\r\n+            aproxLongitude: details.aproxLongitude !== undefined ? String(details.aproxLongitude) : \"\",\r\n           };\r\n           setFormData(mappedDetails);\r\n           setInitialFormData(mappedDetails); // Store for cancel functionality\r\n         } else {\r\n@@ -169,8 +172,10 @@\n     { name: 'state', label: 'State', type: 'text', placeholder: 'e.g., Tamil Nadu' },\r\n     { name: 'pincode', label: 'Pincode', type: 'text', placeholder: 'e.g., 641004' },\r\n     { name: 'moreDetails', label: 'Additional Details & Features', type: 'textarea', placeholder: 'Enter seating capacity, AC/Non-AC, catering options, etc.' },\r\n     { name: 'isApproved', label: 'Approval Status', type: 'checkbox' },\r\n+    { name: 'aproxLatitude', label: 'Approx. Latitude', type: 'text', placeholder: 'e.g., 11.03' },\r\n+    { name: 'aproxLongitude', label: 'Approx. Longitude', type: 'text', placeholder: 'e.g., 76.98' },\r\n   ];\r\n \r\n   // Helper function to render form fields or display text\r\n   function renderField(fieldName) {\r\n@@ -325,8 +330,15 @@\n             </div>\r\n           </fieldset>\r\n \r\n           <fieldset className=\"form-section\">\r\n+            <legend>Geographical Coordinates</legend>\r\n+            <div className=\"form-row-grid\">\r\n+              {renderField('aproxLatitude')}\r\n+              {renderField('aproxLongitude')}\r\n+            </div>\r\n+          </fieldset>\r\n+          <fieldset className=\"form-section\">\r\n             <legend>Admin Controls</legend>\r\n             {renderField('isApproved')}\r\n           </fieldset>\r\n \r\n"
                },
                {
                    "date": 1749486073294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState, useEffect } from 'react';\r\n import { useParams, useNavigate } from 'react-router-dom';\r\n import '../styles/BusinessViewProfile.css';\r\n-import { getBusinessDetailsById, updateBusinessDetailsAPI } from '../services/apiService';\r\n+import { getAllBusinessPartners, updateBusinessDetailsAPI } from '../services/apiService';\r\n \r\n function BusinessViewProfile({ isSidebarOpen }) {\r\n   const { businessId } = useParams(); // Extracts ID from URL, e.g., \"1\", \"12\"\r\n   const navigate = useNavigate();\r\n"
                },
                {
                    "date": 1749486085445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n       setError(null);\r\n       setSuccessMessage('');\r\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n-        const details = await getBusinessDetailsById(businessId); // This calls your apiService\r\n+        const details = await getAllBusinessPartners(businessId); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                },
                {
                    "date": 1749487808809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n       setError(null);\r\n       setSuccessMessage('');\r\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n-        const details = await getAllBusinessPartners(businessId); // This calls your apiService\r\n+        const details = await getAllBusinessPartners(); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                },
                {
                    "date": 1749487816288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n       setError(null);\r\n       setSuccessMessage('');\r\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n-        const details = await getAllBusinessPartners(); // This calls your apiService\r\n+        const details = await getAllBusinessPartners(.f); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                },
                {
                    "date": 1749487823982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n       setError(null);\r\n       setSuccessMessage('');\r\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n-        const details = await getAllBusinessPartners(.f); // This calls your apiService\r\n+        const details = await getAllBusinessPartners().fliter; // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                },
                {
                    "date": 1749487831898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n       setError(null);\r\n       setSuccessMessage('');\r\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n-        const details = await getAllBusinessPartners().fliter; // This calls your apiService\r\n+        const details = await getAllBusinessPartners(); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                },
                {
                    "date": 1749487888206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,10 @@\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n         const details = await getAllBusinessPartners(); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n-\r\n+        \r\n+        \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n           const mappedDetails = {\r\n             id: details.id || businessId,\r\n"
                },
                {
                    "date": 1749487894968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,11 @@\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n         const details = await getAllBusinessPartners(); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n-        \r\n-        \r\n+        const\r\n+\r\n+\r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n           const mappedDetails = {\r\n             id: details.id || businessId,\r\n"
                },
                {
                    "date": 1749487901729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n         const details = await getAllBusinessPartners(); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n-        const(string)\r\n+        const(stringfy)\r\n \r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                },
                {
                    "date": 1749487911528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       try {\r\n         console.log(`BusinessViewProfile: Fetching details for business ID: ${businessId}`);\r\n         const details = await getAllBusinessPartners(); // This calls your apiService\r\n         console.log('BusinessViewProfile: Fetched API Details:', JSON.stringify(details, null, 2)); // Log the raw API response\r\n-        const(stringfy(details))\r\n+        const(stringfy(details));\r\n \r\n \r\n         if (details && typeof details === 'object' && Object.keys(details).length > 0) {\r\n           // Map API response to formData structure, handling potential key differences\r\n"
                }
            ],
            "date": 1749478553772,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../styles/BusinessViewProfile.css';\r\nimport { getBusinessDetailsById, updateBusinessDetailsAPI } from '../services/apiService';\r\n\r\n\r\nfunction BusinessViewProfile({ isSidebarOpen }) {\r\n  const { businessId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [initialFormData, setInitialFormData] = useState(null); // To store original fetched data for cancel\r\n\r\n  if (!businessId) {\r\n    return (\r\n      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n        <h1>Error</h1>\r\n        <p>No Business ID provided in the URL.</p>\r\n        <p>Please go back and select a valid business profile.</p>\r\n        <button onClick={() => navigate(-1)} className=\"action-button error-back-button\">\r\n          Back\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Initialize formData with a structure that matches your fields\r\n  const [formData, setFormData] = useState({\r\n    id: businessId, // Keep the ID from params\r\n    businessName: \"\",\r\n    proprietorName: \"\",\r\n    price: \"\",\r\n    serviceProvided: \"\",\r\n    location: \"\",\r\n    state: \"\", \r\n    district: \"\",\r\n    pincode: \"\",\r\n    phoneNumber: \"\",\r\n    email: \"\",\r\n    moreDetails: \"\",\r\n    isApproved: false,\r\n    subCategories: [],\r\n  });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      const fetchDetails = async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n          // In a real app, you'd call your actual API service function here\r\n          const details = await getBusinessDetailsById(businessId);\r\n          if (details) {\r\n            setFormData(details);\r\n          } else {\r\n            setError(\"Business details not found or API returned no data.\");\r\n          }\r\n          setInitialFormData(details); // Store for cancel functionality\r\n        } catch (err) {\r\n          setError(err.message || \"Failed to fetch business details.\");\r\n          console.error(\"API Error:\", err);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n      fetchDetails();\r\n    }\r\n  }, [businessId]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData(prevData => {\r\n      // Ensure subCategories remains an array if it's being directly edited (though not in this form setup)\r\n      const newValue = type === 'checkbox' ? checked : value;\r\n      return {\r\n        ...prevData,\r\n        [name]: newValue,\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    setError(null);\r\n    setSuccessMessage('');\r\n    try {\r\n      // In a real app, call your update API service\r\n      await updateBusinessDetailsAPI(businessId, formData);\r\n      setSuccessMessage(\"Business details updated successfully!\");\r\n      setInitialFormData(formData); // Update initial data to current after successful save\r\n      setIsEditing(false);\r\n    } catch (err) {\r\n      setError(err.message || \"Failed to update business details.\");\r\n      console.error(\"API Update Error:\", err);\r\n      // alert(`Error: ${err.message || \"Failed to update business details.\"}`); // Avoid using alert for errors\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate(-1);\r\n  };\r\n  const handleEdit = () => {\r\n    if (isEditing && initialFormData) {\r\n      setFormData(initialFormData); // Revert to original data on cancel\r\n    }\r\n    setIsEditing(!isEditing);\r\n    setError(null); // Clear any previous errors when toggling edit mode\r\n    setSuccessMessage('');\r\n  };\r\n\r\n  const handleApprove = async () => {\r\n    setIsSubmitting(true);\r\n    setError(null);\r\n    setSuccessMessage('');\r\n    try {\r\n      const updatedData = { ...formData, isApproved: true };\r\n      await updateBusinessDetailsAPI(businessId, updatedData);\r\n      setFormData(updatedData); // Update local state to reflect approval\r\n      setInitialFormData(updatedData); // Update initial data as well\r\n      setSuccessMessage(\"Business approved successfully!\");\r\n      // Optionally, navigate away or disable the approve button\r\n      // navigate('/pending-approvals'); // Or to business management\r\n    } catch (err) {\r\n      setError(err.message || \"Failed to approve business.\");\r\n      console.error(\"API Approve Error:\", err);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const editableFields = [\r\n    { name: 'businessName', label: 'Business Name', type: 'text', placeholder: 'Enter business name' },\r\n    { name: 'proprietorName', label: 'Proprietor Name', type: 'text', placeholder: 'Enter proprietor name' },\r\n    { name: 'serviceProvided', label: 'Service Provided', type: 'text', placeholder: 'e.g., Wedding, Catering' },\r\n    { name: 'price', label: 'Approx. Price (INR)', type: 'text', placeholder: 'e.g., 10000' },\r\n    { name: 'phoneNumber', label: 'Phone Number', type: 'tel', placeholder: 'Enter 10-digit phone number' },\r\n    { name: 'email', label: 'Email Address', type: 'email', placeholder: 'Enter contact email' },\r\n    { name: 'location', label: 'Full Address', type: 'textarea', placeholder: 'Enter full street address' },\r\n    { name: 'district', label: 'District', type: 'text', placeholder: 'e.g., Coimbatore' },\r\n    { name: 'state', label: 'State', type: 'text', placeholder: 'e.g., Tamil Nadu' },\r\n    { name: 'pincode', label: 'Pincode', type: 'text', placeholder: 'e.g., 641004' },\r\n    { name: 'moreDetails', label: 'Additional Details & Features', type: 'textarea', placeholder: 'Enter seating capacity, AC/Non-AC, catering options, etc.' },\r\n    { name: 'isApproved', label: 'Approval Status', type: 'checkbox' },\r\n  ];\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n        <div className=\"profile-view-header\">\r\n          <h1 className=\"header-main-title\">Loading Business Profile...</h1>\r\n        </div>\r\n        <p style={{ textAlign: 'center' }}>Fetching details, please wait...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error && !isEditing) { // Show main error if not in editing mode (where field-specific errors might be shown)\r\n    return (\r\n      <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n        <div className=\"profile-view-header\">\r\n          <h1 className=\"header-main-title\">Error</h1>\r\n        </div>\r\n        <p style={{ textAlign: 'center', color: 'red' }}>{error}</p>\r\n        <button onClick={handleBack} className=\"action-button error-back-button\">\r\n          Back\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`profile-container ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n      <div className=\"profile-view-header\">\r\n        <button type=\"button\" className=\"header-action-button back-button-header\" onClick={handleBack}>\r\n          ← Back\r\n        </button>\r\n        <h1 className=\"header-main-title\">Business Profile</h1>\r\n        <button type=\"button\" className=\"header-action-button edit-button-header\" onClick={handleEdit} disabled={isLoading || isSubmitting}>\r\n          {isEditing ? 'Cancel' : 'Edit'}\r\n        </button>\r\n      </div>\r\n\r\n      {successMessage && <p style={{ color: 'green', textAlign: 'center', marginTop: '10px' }}>{successMessage}</p>}\r\n      {/* Error message display is already handled below if error and !isEditing */}\r\n\r\n      <form onSubmit={handleSubmit} className=\"profile-form\">\r\n        {/* Basic Information */}\r\n        <fieldset className=\"form-section\">\r\n          <legend>Basic Information</legend>\r\n          <div className=\"form-row-grid\">\r\n            {renderField('businessName')}\r\n            {renderField('proprietorName')}\r\n            {renderField('serviceProvided')}\r\n            {renderField('price')}\r\n          </div>\r\n        </fieldset>\r\n\r\n        {/* Contact Information */}\r\n        <fieldset className=\"form-section\">\r\n          <legend>Contact Information</legend>\r\n          <div className=\"form-row-grid\">\r\n            {renderField('phoneNumber')}\r\n            {renderField('email')}\r\n          </div>\r\n        </fieldset>\r\n\r\n        {/* Location Information */}\r\n        <fieldset className=\"form-section\">\r\n          <legend>Location Information</legend>\r\n          {renderField('location')}\r\n          <div className=\"form-row-grid\">\r\n            {renderField('district')}\r\n            {renderField('state')}\r\n            {renderField('pincode')}\r\n          </div>\r\n        </fieldset>\r\n\r\n        {/* Additional Details */}\r\n        <fieldset className=\"form-section\">\r\n          <legend>Additional Details</legend>\r\n          {renderField('moreDetails')}\r\n          <div className=\"form-group\">\r\n            <label>Sub-Categories:</label>\r\n            {/* Display subCategories. If they need to be editable, this part would need a more complex input. */}\r\n            <span>\r\n              {Array.isArray(formData.subCategories) && formData.subCategories.length > 0\r\n                ? formData.subCategories.join(', ')\r\n                : 'N/A'}\r\n            </span>\r\n          </div>\r\n        </fieldset>\r\n\r\n        {/* Admin Controls */}\r\n        <fieldset className=\"form-section\">\r\n          <legend>Admin Controls</legend>\r\n          {renderField('isApproved')}\r\n        </fieldset>\r\n\r\n        {!formData.isApproved && !isEditing && (\r\n          <div className=\"form-actions\" style={{ justifyContent: 'center', borderTop: 'none', paddingTop: '10px' }}>\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleApprove}\r\n              className=\"action-button submit-button\" // You might want a different class for approve\r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? 'Approving...' : 'Approve Business'}\r\n            </button>\r\n          </div>\r\n        )}\r\n        {isEditing && (\r\n          <div className=\"form-actions\">\r\n            <button type=\"submit\" className=\"action-button submit-button\" disabled={isSubmitting || isLoading}>\r\n              {isSubmitting ? 'Saving...' : 'Save Changes'}\r\n            </button>\r\n          </div>\r\n        )}\r\n        {error && isEditing && ( // Show error message below save button if in edit mode\r\n          <p style={{ textAlign: 'center', color: 'red', marginTop: '10px' }}>Error: {error}</p>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  function renderField(fieldName) {\r\n    const field = editableFields.find(f => f.name === fieldName);\r\n    if (!field) return null;\r\n\r\n    return (\r\n      <div className={`form-group ${field.type === 'textarea' ? 'textarea-full-width' : ''}`} key={field.name}>\r\n        <label htmlFor={field.name}>{field.label}</label>\r\n        {!isEditing ? (\r\n          <span>\r\n            {field.type === 'checkbox'\r\n              ? (formData[field.name] ? 'Yes' : 'No')\r\n              : (formData[field.name] || 'N/A')}\r\n          </span>\r\n        ) : field.type === 'textarea' ? (\r\n            <textarea\r\n              id={field.name}\r\n              name={field.name}\r\n              value={formData[field.name] || ''}\r\n              onChange={handleChange}\r\n              placeholder={field.placeholder}\r\n              rows={field.name === 'location' ? 3 : (field.name === 'moreDetails' ? 5 : 4)}\r\n              disabled={isSubmitting}\r\n            />\r\n          ) : field.type === 'checkbox' ? (\r\n            <div className=\"checkbox-wrapper\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id={field.name}\r\n                name={field.name}\r\n                checked={Boolean(formData[field.name])} // Ensure it's a boolean\r\n                onChange={handleChange}\r\n                className=\"form-checkbox\"\r\n                disabled={isSubmitting}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <input\r\n              type={field.type}\r\n              id={field.name}\r\n              name={field.name}\r\n              value={formData[field.name] || ''}\r\n              onChange={handleChange}\r\n              placeholder={field.placeholder}\r\n              disabled={isSubmitting}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessViewProfile;\r\n"
        }
    ]
}