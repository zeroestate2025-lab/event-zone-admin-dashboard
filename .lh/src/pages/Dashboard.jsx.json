{
    "sourceFile": "src/pages/Dashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748538175010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748538278917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import '../styles/Dashboard.css';\r\n+import { getUserCount, getBusinessPartnerCount } from '../services/apiService'; // Import API functions\r\n+\r\n+function Dashboard({ isSidebarOpen }) {\r\n+  const [userCount, setUserCount] = useState(0);\r\n+  const [businessCount, setBusinessCount] = useState(0);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+      try {\r\n+        // Fetch User Count\r\n+        const uCount = await getUserCount();\r\n+        setUserCount(uCount);\r\n+\r\n+        // Fetch Business Partner Count\r\n+        const bCount = await getBusinessPartnerCount();\r\n+        setBusinessCount(bCount);\r\n+\r\n+      } catch (e) {\r\n+        console.error(\"Failed to fetch dashboard data:\", e);\r\n+        setError(e.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchData();\r\n+  }, []); // Empty dependency array means this effect runs once on mount.\r\n+          // If your token could change and you wanted to refetch, you'd need a way\r\n+          // to signal that change here (e.g., from an Auth Context).\r\n+\r\n+  return (\r\n+    <div className={`dashboard ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+      <h1>Home</h1>\r\n+      {error && <p className=\"error-message\">Error fetching data: {error}</p>}\r\n+      {/* Stats Cards */}\r\n+      <div className=\"stats-grid\">\r\n+        <div className=\"stat-card\">\r\n+          <p>Total Users</p>\r\n+          <h2>{loading ? 'Loading...' : userCount}</h2>\r\n+        </div>\r\n+        <div className=\"stat-card\">\r\n+          <p>Vendors</p>\r\n+          <h2>{loading ? 'Loading...' : businessCount}</h2>\r\n+        </div>\r\n+        <div className=\"stat-card\">\r\n+          <p>Subscription</p>\r\n+          <h2>$508300</h2>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Action Cards */}\r\n+      <div className=\"action-grid\">\r\n+        <div className=\"action-card\">\r\n+          <Link to=\"/events\" style={{ color: 'inherit', textDecoration: 'none' }}>\r\n+            <h3>Events</h3>\r\n+            <span>→</span>\r\n+          </Link>\r\n+        </div>\r\n+        <div className=\"action-card\">\r\n+          <Link to=\"/promotions\" style={{ color: 'inherit', textDecoration: 'none' }}>\r\n+            <h3>Promotions</h3>\r\n+            <span>→</span>\r\n+          </Link>\r\n+        </div>\r\n+        <div className=\"action-card\">\r\n+          <Link to=\"/pending-approvals\" style={{ color: 'inherit', textDecoration: 'none' }}>\r\n+            <h3>Pending Approvals</h3>\r\n+            <span>→</span>\r\n+          </Link>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default Dashboard;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748538175010,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/Dashboard.css';\r\n\r\nfunction Dashboard({ isSidebarOpen }) {\r\n  const [userCount, setUserCount] = useState(0);\r\n  const [businessCount, setBusinessCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const API_BASE_URL = 'http://localhost:3000';\r\n  // IMPORTANT: In a real application, the token should not be hardcoded.\r\n  // It should be managed securely (e.g., via context, Redux, or a secure storage mechanism).\r\n  const TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1vbmVzaHdhciIsInN1YiI6MTIsImlhdCI6MTc0ODQ5MzcwMSwiZXhwIjoxNzY0MDQ1NzAxfQ.R3lljEkXTBnfb4PErBdiSW-eWkfi-L6OKwyDQLnzWnw\";\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const headers = {\r\n          'Authorization': `Bearer ${TOKEN}`,\r\n          'Content-Type': 'application/json'\r\n        };\r\n\r\n        // Fetch User Count\r\n        const userResponse = await fetch(`${API_BASE_URL}/user/count`, { headers });\r\n        if (!userResponse.ok) {\r\n          throw new Error(`HTTP error! status: ${userResponse.status} for user count`);\r\n        }\r\n        const userData = await userResponse.json();\r\n        // Assuming the API returns an object like { count: 123 }\r\n        // Adjust if the API returns the count directly or in a different structure\r\n        setUserCount(userData.count !== undefined ? userData.count : userData);\r\n\r\n        // Fetch Business Partner Count\r\n        const businessResponse = await fetch(`${API_BASE_URL}/business-partner/count`, { headers });\r\n        if (!businessResponse.ok) {\r\n          throw new Error(`HTTP error! status: ${businessResponse.status} for business count`);\r\n        }\r\n        const businessData = await businessResponse.json();\r\n        setBusinessCount(businessData.count !== undefined ? businessData.count : businessData);\r\n\r\n      } catch (e) {\r\n        console.error(\"Failed to fetch dashboard data:\", e);\r\n        setError(e.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [TOKEN]); // Added TOKEN to dependency array if it could change, though it's hardcoded here.\r\n\r\n  return (\r\n    <div className={`dashboard ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n      <h1>Home</h1>\r\n      {error && <p className=\"error-message\">Error fetching data: {error}</p>}\r\n      {/* Stats Cards */}\r\n      <div className=\"stats-grid\">\r\n        <div className=\"stat-card\">\r\n          <p>Total Users</p>\r\n          <h2>{loading ? 'Loading...' : userCount}</h2>\r\n        </div>\r\n        <div className=\"stat-card\">\r\n          <p>Vendors</p>\r\n          <h2>{loading ? 'Loading...' : businessCount}</h2>\r\n        </div>\r\n        <div className=\"stat-card\">\r\n          <p>Subscription</p>\r\n          <h2>$508300</h2>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Action Cards */}\r\n      <div className=\"action-grid\">\r\n        <div className=\"action-card\">\r\n          <Link to=\"/events\" style={{ color: 'inherit', textDecoration: 'none' }}>\r\n            <h3>Events</h3>\r\n            <span>→</span>\r\n          </Link>\r\n        </div>\r\n        <div className=\"action-card\">\r\n          <Link to=\"/promotions\" style={{ color: 'inherit', textDecoration: 'none' }}>\r\n            <h3>Promotions</h3>\r\n            <span>→</span>\r\n          </Link>\r\n        </div>\r\n        <div className=\"action-card\">\r\n          <Link to=\"/pending-approvals\" style={{ color: 'inherit', textDecoration: 'none' }}>\r\n            <h3>Pending Approvals</h3>\r\n            <span>→</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;"
        }
    ]
}