{
    "sourceFile": "src/pages/UserManagement.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749477464965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749477464965,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport '../styles/UserManagement.css';\r\nimport { getAllUsers } from '../services/apiService'; // Import the API function\r\n\r\nfunction UserManagement({ isSidebarOpen }) {\r\n  // State to manage the users and dropdown visibility for each row\r\n  const [users, setUsers] = useState([]);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const data = await getAllUsers();\r\n        // Assuming the API returns an array of user objects.\r\n        // Each user object should have fields like: id, name, phone, email, location, status\r\n        // We will use id, name, and phone (or phoneNumber)\r\n        // Example: if API returns 'userName' instead of 'name', use user.userName\r\n        console.log(\"Fetched users:\", data);\r\n        setUsers(data || []); // Ensure data is an array\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch users:\", err.message || err);\r\n        setError(err.message || \"Failed to load users.\");\r\n        setUsers([]); // Set to empty array on error\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const [error, setError] = useState(null);\r\n\r\n  return (\r\n    <div className={`user-management ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n      {/* Header Section */}\r\n      <div className=\"user-management-header\">\r\n        <div className=\"header-left\">\r\n          <span className=\"back-arrow\">‚Üê</span>\r\n          <h1>User Management</h1>\r\n        </div>\r\n        <div className=\"header-right\">\r\n          {/* <div className=\"search-bar\">\r\n            <input type=\"text\" placeholder=\"Search\" />\r\n            <span className=\"search-icon\">üîç</span>\r\n          </div> */}\r\n          <div className=\"total-users\">\r\n            <span>Total Users: {loading ? '...' : users.length}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {loading && <p className=\"loading-message\">Loading users...</p>}\r\n      {error && <p className=\"error-message\">Error: {error}</p>}\r\n\r\n      {/* Table Section */}\r\n      <div className=\"user-table-container\">\r\n        <table className=\"user-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Business ID</th>\r\n              <th>Name</th>\r\n              <th>Phone Number</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {!loading && !error && users.length > 0 ? (\r\n              users.map((user, index) => (\r\n                // It's better to use a unique ID from the user data if available, e.g., user.id\r\n                <tr key={user.id || index}>\r\n                  <td>{user.id || 'N/A'}</td>\r\n                  <td>{user.name || 'N/A'}</td>\r\n                  <td>{user.phone || user.phoneNumber || 'N/A'}</td> {/* Check API field name */}\r\n                </tr>\r\n              ))\r\n            ) : !loading && !error && users.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan=\"3\" style={{ textAlign: 'center' }}>No users found.</td>\r\n                </tr>\r\n            ) : null}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserManagement;"
        }
    ]
}