{
    "sourceFile": "src/pages/Promotions.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1748540889395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748540973235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,21 @@\n import { useState, useEffect } from 'react';\r\n-import { getAllPromotions, addPromotion } from '../services/apiService';\r\n+// import { getAllPromotions, addPromotion } from '../services/apiService'; // API calls commented out\r\n import '../styles/Promotions.css'; // Import the new CSS file\r\n \r\n+// Sample data for UI design purposes\r\n+const samplePromotions = [\r\n+  { id: 1, businessId: 101, position: 'Homepage Top Banner', isApproved: true },\r\n+  { id: 2, businessId: 102, position: 'Sidebar Ad Slot 1', isApproved: false },\r\n+  { id: 3, businessId: 103, position: 'Featured Listing - Category Page', isApproved: true },\r\n+  { id: 4, businessId: 104, position: 'Newsletter Spotlight', isApproved: true },\r\n+];\r\n+\r\n function Promotions({ isSidebarOpen }) {\r\n-  const [promotions, setPromotions] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n+  // const [promotions, setPromotions] = useState([]); // Using sample data instead\r\n+  const [promotions, setPromotions] = useState(samplePromotions); // Initialize with sample data\r\n+  // const [loading, setLoading] = useState(true); // Assuming data is loaded for UI design\r\n+  const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const [showAddModal, setShowAddModal] = useState(false);\r\n   const [newPromotionData, setNewPromotionData] = useState({\r\n     businessId: '',\r\n@@ -13,25 +23,27 @@\n     isApproved: true, // Defaulting to true as per API example, adjust if needed\r\n   });\r\n \r\n   const fetchPromotions = async () => {\r\n-    setLoading(true);\r\n-    setError(null);\r\n-    try {\r\n-      const data = await getAllPromotions();\r\n-      setPromotions(data || []);\r\n-    } catch (err) {\r\n-      console.error(\"Failed to fetch promotions:\", err);\r\n-      setError(err.message);\r\n-      setPromotions([]);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n+    // setLoading(true);\r\n+    // setError(null);\r\n+    // try {\r\n+    //   // const data = await getAllPromotions();\r\n+    //   // setPromotions(data || []);\r\n+    //   console.log(\"API call to fetch promotions would be here.\");\r\n+    // } catch (err) {\r\n+    //   console.error(\"Failed to fetch promotions:\", err);\r\n+    //   setError(err.message);\r\n+    //   setPromotions([]);\r\n+    // } finally {\r\n+    //   setLoading(false);\r\n+    // }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    fetchPromotions();\r\n-  }, []);\r\n+    // fetchPromotions(); // API call commented out\r\n+    // If you want to simulate loading for UI testing, you can add a timeout here\r\n+  }, []); \r\n \r\n   const handleInputChange = (e) => {\r\n     const { name, value, type, checked } = e.target;\r\n     setNewPromotionData(prev => ({\r\n@@ -52,20 +64,28 @@\n         ...newPromotionData,\r\n         businessId: parseInt(newPromotionData.businessId, 10),\r\n         // position might also need to be a number, adjust as per API\r\n       };\r\n-      await addPromotion(payload);\r\n+      // await addPromotion(payload); // API call commented out\r\n+      console.log(\"Simulating add promotion with payload:\", payload);\r\n+      // Simulate adding to the local list for UI feedback\r\n+      setPromotions(prevPromotions => [\r\n+        ...prevPromotions,\r\n+        {\r\n+          id: Date.now(), // Temporary unique ID for UI\r\n+          ...payload\r\n+        }\r\n+      ]);\r\n       setShowAddModal(false);\r\n       setNewPromotionData({ businessId: '', position: '', isApproved: true }); // Reset form\r\n-      fetchPromotions(); // Refetch promotions to show the new one\r\n+      // fetchPromotions(); // Refetch promotions to show the new one - commented out\r\n       alert(\"Promotion added successfully!\");\r\n     } catch (err) {\r\n       console.error(\"Failed to add promotion:\", err);\r\n       setError(err.message);\r\n       alert(`Failed to add promotion: ${err.message}`);\r\n     }\r\n   };\r\n-\r\n   if (loading) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Loading promotions...</p></div>;\r\n   if (error) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Error fetching promotions: {error}</p></div>;\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748541223272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,69 @@\n import { useState, useEffect } from 'react';\r\n-// import { getAllPromotions, addPromotion } from '../services/apiService'; // API calls commented out\r\n+import { getAllPromotions, addPromotion, getAllBusinessPartners } from '../services/apiService';\r\n import '../styles/Promotions.css'; // Import the new CSS file\r\n \r\n-// Sample data for UI design purposes\r\n-const samplePromotions = [\r\n-  { id: 1, businessId: 101, position: 'Homepage Top Banner', isApproved: true },\r\n-  { id: 2, businessId: 102, position: 'Sidebar Ad Slot 1', isApproved: false },\r\n-  { id: 3, businessId: 103, position: 'Featured Listing - Category Page', isApproved: true },\r\n-  { id: 4, businessId: 104, position: 'Newsletter Spotlight', isApproved: true },\r\n-];\r\n-\r\n function Promotions({ isSidebarOpen }) {\r\n-  // const [promotions, setPromotions] = useState([]); // Using sample data instead\r\n-  const [promotions, setPromotions] = useState(samplePromotions); // Initialize with sample data\r\n-  // const [loading, setLoading] = useState(true); // Assuming data is loaded for UI design\r\n-  const [loading, setLoading] = useState(false);\r\n+  const [promotions, setPromotions] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n   const [showAddModal, setShowAddModal] = useState(false);\r\n+\r\n+  // State for the \"Add Promotion\" modal\r\n   const [newPromotionData, setNewPromotionData] = useState({\r\n-    businessId: '',\r\n+    businessId: '', // Will be selected from a dropdown\r\n     position: '',\r\n     isApproved: true, // Defaulting to true as per API example, adjust if needed\r\n   });\r\n+  const [approvedBusinesses, setApprovedBusinesses] = useState([]);\r\n+  const [modalLoadingBusinesses, setModalLoadingBusinesses] = useState(false);\r\n+  const [modalError, setModalError] = useState(null);\r\n \r\n   const fetchPromotions = async () => {\r\n-    // setLoading(true);\r\n-    // setError(null);\r\n-    // try {\r\n-    //   // const data = await getAllPromotions();\r\n-    //   // setPromotions(data || []);\r\n-    //   console.log(\"API call to fetch promotions would be here.\");\r\n-    // } catch (err) {\r\n-    //   console.error(\"Failed to fetch promotions:\", err);\r\n-    //   setError(err.message);\r\n-    //   setPromotions([]);\r\n-    // } finally {\r\n-    //   setLoading(false);\r\n-    // }\r\n+    setLoading(true);\r\n+    setError(null);\r\n+    try {\r\n+      const data = await getAllPromotions();\r\n+      setPromotions(data || []);\r\n+    } catch (err) {\r\n+      console.error(\"Failed to fetch promotions:\", err);\r\n+      setError(err.message);\r\n+      setPromotions([]);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n   };\r\n \r\n+  const fetchApprovedBusinessesForModal = async () => {\r\n+    setModalLoadingBusinesses(true);\r\n+    setModalError(null);\r\n+    try {\r\n+      const allBus = await getAllBusinessPartners();\r\n+      const approved = (allBus || []).filter(business => business.isApproved); // Ensure 'isApproved' field exists\r\n+      setApprovedBusinesses(approved);\r\n+    } catch (err) {\r\n+      console.error(\"Failed to fetch businesses for modal:\", err);\r\n+      setModalError(err.message);\r\n+    } finally {\r\n+      setModalLoadingBusinesses(false);\r\n+    }\r\n+  };\r\n+\r\n   useEffect(() => {\r\n-    // fetchPromotions(); // API call commented out\r\n-    // If you want to simulate loading for UI testing, you can add a timeout here\r\n-  }, []); \r\n+    fetchPromotions();\r\n+  }, []);\r\n \r\n+  useEffect(() => {\r\n+    if (showAddModal) {\r\n+      fetchApprovedBusinessesForModal();\r\n+    } else {\r\n+      // Reset when modal closes to ensure fresh data next time and clear selections\r\n+      setApprovedBusinesses([]);\r\n+      setNewPromotionData({ businessId: '', position: '', isApproved: true });\r\n+      setModalError(null);\r\n+    }\r\n+  }, [showAddModal]);\r\n+\r\n   const handleInputChange = (e) => {\r\n     const { name, value, type, checked } = e.target;\r\n     setNewPromotionData(prev => ({\r\n       ...prev,\r\n@@ -64,25 +83,17 @@\n         ...newPromotionData,\r\n         businessId: parseInt(newPromotionData.businessId, 10),\r\n         // position might also need to be a number, adjust as per API\r\n       };\r\n-      // await addPromotion(payload); // API call commented out\r\n-      console.log(\"Simulating add promotion with payload:\", payload);\r\n-      // Simulate adding to the local list for UI feedback\r\n-      setPromotions(prevPromotions => [\r\n-        ...prevPromotions,\r\n-        {\r\n-          id: Date.now(), // Temporary unique ID for UI\r\n-          ...payload\r\n-        }\r\n-      ]);\r\n+      await addPromotion(payload);\r\n       setShowAddModal(false);\r\n       setNewPromotionData({ businessId: '', position: '', isApproved: true }); // Reset form\r\n-      // fetchPromotions(); // Refetch promotions to show the new one - commented out\r\n+      fetchPromotions(); // Refetch promotions to show the new one\r\n       alert(\"Promotion added successfully!\");\r\n     } catch (err) {\r\n       console.error(\"Failed to add promotion:\", err);\r\n-      setError(err.message);\r\n+      // Display error related to adding promotion, perhaps in the modal or as a general notification\r\n+      setModalError(`Failed to add promotion: ${err.message}`); // Or use a general error state\r\n       alert(`Failed to add promotion: ${err.message}`);\r\n     }\r\n   };\r\n   if (loading) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Loading promotions...</p></div>;\r\n@@ -99,9 +110,10 @@\n         </div>\r\n \r\n         {/* Existing Promotion Cards */}\r\n         {promotions.map(promo => (\r\n-          <div key={promo.id || promo.businessId + '-' + promo.position} className=\"promotion-card\"> {/* Use a unique key */}\r\n+          // Ensure promo.id is unique and present from your API.\r\n+          <div key={promo.id || `${promo.businessId}-${promo.position}-${Math.random()}`} className=\"promotion-card\">\r\n             <h3>Business ID: {promo.businessId}</h3>\r\n             <p>Position: {promo.position}</p>\r\n             <p className={`status ${promo.isApproved ? 'approved' : 'pending'}`}>\r\n               Status: {promo.isApproved ? 'Approved' : 'Pending'}\r\n@@ -117,18 +129,39 @@\n         <div className=\"modal-overlay\">\r\n           <div className=\"modal-content\">\r\n             <h2>Add New Promotion</h2>\r\n             <form onSubmit={handleSubmitNewPromotion}>\r\n-              {/* Basic form, enhance with proper input components and validation */}\r\n               <div>\r\n-                <label htmlFor=\"businessId\">Business ID:</label>\r\n-                <input type=\"number\" id=\"businessId\" name=\"businessId\" value={newPromotionData.businessId} onChange={handleInputChange} required />\r\n+                <label htmlFor=\"businessId\">Select Business:</label>\r\n+                {modalLoadingBusinesses && <p>Loading businesses...</p>}\r\n+                {modalError && !modalLoadingBusinesses && <p className=\"error-message\">Error: {modalError}</p>}\r\n+                {!modalLoadingBusinesses && !modalError && (\r\n+                  <select\r\n+                    id=\"businessId\"\r\n+                    name=\"businessId\"\r\n+                    value={newPromotionData.businessId}\r\n+                    onChange={handleInputChange}\r\n+                    required\r\n+                    disabled={approvedBusinesses.length === 0}\r\n+                  >\r\n+                    <option value=\"\" disabled>\r\n+                      {approvedBusinesses.length === 0 ? \"No approved businesses available\" : \"-- Select an Approved Business --\"}\r\n+                    </option>\r\n+                    {approvedBusinesses.map(business => (\r\n+                      // Assuming business object has 'id' and 'businessName'\r\n+                      <option key={business.id} value={business.id}>\r\n+                        {business.businessName || `Business ID: ${business.id}`} {/* Fallback display name */}\r\n+                      </option>\r\n+                    ))}\r\n+                  </select>\r\n+                )}\r\n               </div>\r\n               <div>\r\n                 <label htmlFor=\"position\">Position:</label>\r\n                 <input type=\"text\" id=\"position\" name=\"position\" value={newPromotionData.position} onChange={handleInputChange} required />\r\n               </div>\r\n-              {/* Consider if isApproved should be set here or by admin logic */}\r\n+              {/* Optional: Allow setting approval status directly, if applicable */}\r\n+              {/* <div><label><input type=\"checkbox\" name=\"isApproved\" checked={newPromotionData.isApproved} onChange={handleInputChange} /> Approved</label></div> */}\r\n               <button type=\"submit\">Add Promotion</button>\r\n               <button type=\"button\" onClick={() => setShowAddModal(false)}>Cancel</button>\r\n             </form>\r\n           </div>\r\n"
                },
                {
                    "date": 1748541230749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,50 @@\n import { useState, useEffect } from 'react';\r\n-import { getAllPromotions, addPromotion, getAllBusinessPartners } from '../services/apiService';\r\n+// import { getAllPromotions, addPromotion } from '../services/apiService'; // API calls commented out\r\n import '../styles/Promotions.css'; // Import the new CSS file\r\n \r\n+// Sample data for UI design purposes\r\n+const samplePromotions = [\r\n+  { id: 1, businessId: 101, position: 'Homepage Top Banner', isApproved: true },\r\n+  { id: 2, businessId: 102, position: 'Sidebar Ad Slot 1', isApproved: false },\r\n+  { id: 3, businessId: 103, position: 'Featured Listing - Category Page', isApproved: true },\r\n+  { id: 4, businessId: 104, position: 'Newsletter Spotlight', isApproved: true },\r\n+];\r\n+\r\n function Promotions({ isSidebarOpen }) {\r\n-  const [promotions, setPromotions] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n+  // const [promotions, setPromotions] = useState([]); // Using sample data instead\r\n+  const [promotions, setPromotions] = useState(samplePromotions); // Initialize with sample data\r\n+  // const [loading, setLoading] = useState(true); // Assuming data is loaded for UI design\r\n+  const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const [showAddModal, setShowAddModal] = useState(false);\r\n-\r\n-  // State for the \"Add Promotion\" modal\r\n   const [newPromotionData, setNewPromotionData] = useState({\r\n-    businessId: '', // Will be selected from a dropdown\r\n+    businessId: '',\r\n     position: '',\r\n     isApproved: true, // Defaulting to true as per API example, adjust if needed\r\n   });\r\n-  const [approvedBusinesses, setApprovedBusinesses] = useState([]);\r\n-  const [modalLoadingBusinesses, setModalLoadingBusinesses] = useState(false);\r\n-  const [modalError, setModalError] = useState(null);\r\n \r\n   const fetchPromotions = async () => {\r\n-    setLoading(true);\r\n-    setError(null);\r\n-    try {\r\n-      const data = await getAllPromotions();\r\n-      setPromotions(data || []);\r\n-    } catch (err) {\r\n-      console.error(\"Failed to fetch promotions:\", err);\r\n-      setError(err.message);\r\n-      setPromotions([]);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n+    // setLoading(true);\r\n+    // setError(null);\r\n+    // try {\r\n+    //   // const data = await getAllPromotions();\r\n+    //   // setPromotions(data || []);\r\n+    //   console.log(\"API call to fetch promotions would be here.\");\r\n+    // } catch (err) {\r\n+    //   console.error(\"Failed to fetch promotions:\", err);\r\n+    //   setError(err.message);\r\n+    //   setPromotions([]);\r\n+    // } finally {\r\n+    //   setLoading(false);\r\n+    // }\r\n   };\r\n \r\n-  const fetchApprovedBusinessesForModal = async () => {\r\n-    setModalLoadingBusinesses(true);\r\n-    setModalError(null);\r\n-    try {\r\n-      const allBus = await getAllBusinessPartners();\r\n-      const approved = (allBus || []).filter(business => business.isApproved); // Ensure 'isApproved' field exists\r\n-      setApprovedBusinesses(approved);\r\n-    } catch (err) {\r\n-      console.error(\"Failed to fetch businesses for modal:\", err);\r\n-      setModalError(err.message);\r\n-    } finally {\r\n-      setModalLoadingBusinesses(false);\r\n-    }\r\n-  };\r\n-\r\n   useEffect(() => {\r\n-    fetchPromotions();\r\n-  }, []);\r\n+    // fetchPromotions(); // API call commented out\r\n+    // If you want to simulate loading for UI testing, you can add a timeout here\r\n+  }, []); \r\n \r\n-  useEffect(() => {\r\n-    if (showAddModal) {\r\n-      fetchApprovedBusinessesForModal();\r\n-    } else {\r\n-      // Reset when modal closes to ensure fresh data next time and clear selections\r\n-      setApprovedBusinesses([]);\r\n-      setNewPromotionData({ businessId: '', position: '', isApproved: true });\r\n-      setModalError(null);\r\n-    }\r\n-  }, [showAddModal]);\r\n-\r\n   const handleInputChange = (e) => {\r\n     const { name, value, type, checked } = e.target;\r\n     setNewPromotionData(prev => ({\r\n       ...prev,\r\n@@ -83,17 +64,25 @@\n         ...newPromotionData,\r\n         businessId: parseInt(newPromotionData.businessId, 10),\r\n         // position might also need to be a number, adjust as per API\r\n       };\r\n-      await addPromotion(payload);\r\n+      // await addPromotion(payload); // API call commented out\r\n+      console.log(\"Simulating add promotion with payload:\", payload);\r\n+      // Simulate adding to the local list for UI feedback\r\n+      setPromotions(prevPromotions => [\r\n+        ...prevPromotions,\r\n+        {\r\n+          id: Date.now(), // Temporary unique ID for UI\r\n+          ...payload\r\n+        }\r\n+      ]);\r\n       setShowAddModal(false);\r\n       setNewPromotionData({ businessId: '', position: '', isApproved: true }); // Reset form\r\n-      fetchPromotions(); // Refetch promotions to show the new one\r\n+      // fetchPromotions(); // Refetch promotions to show the new one - commented out\r\n       alert(\"Promotion added successfully!\");\r\n     } catch (err) {\r\n       console.error(\"Failed to add promotion:\", err);\r\n-      // Display error related to adding promotion, perhaps in the modal or as a general notification\r\n-      setModalError(`Failed to add promotion: ${err.message}`); // Or use a general error state\r\n+      setError(err.message);\r\n       alert(`Failed to add promotion: ${err.message}`);\r\n     }\r\n   };\r\n   if (loading) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Loading promotions...</p></div>;\r\n@@ -110,10 +99,9 @@\n         </div>\r\n \r\n         {/* Existing Promotion Cards */}\r\n         {promotions.map(promo => (\r\n-          // Ensure promo.id is unique and present from your API.\r\n-          <div key={promo.id || `${promo.businessId}-${promo.position}-${Math.random()}`} className=\"promotion-card\">\r\n+          <div key={promo.id || promo.businessId + '-' + promo.position} className=\"promotion-card\"> {/* Use a unique key */}\r\n             <h3>Business ID: {promo.businessId}</h3>\r\n             <p>Position: {promo.position}</p>\r\n             <p className={`status ${promo.isApproved ? 'approved' : 'pending'}`}>\r\n               Status: {promo.isApproved ? 'Approved' : 'Pending'}\r\n@@ -129,39 +117,18 @@\n         <div className=\"modal-overlay\">\r\n           <div className=\"modal-content\">\r\n             <h2>Add New Promotion</h2>\r\n             <form onSubmit={handleSubmitNewPromotion}>\r\n+              {/* Basic form, enhance with proper input components and validation */}\r\n               <div>\r\n-                <label htmlFor=\"businessId\">Select Business:</label>\r\n-                {modalLoadingBusinesses && <p>Loading businesses...</p>}\r\n-                {modalError && !modalLoadingBusinesses && <p className=\"error-message\">Error: {modalError}</p>}\r\n-                {!modalLoadingBusinesses && !modalError && (\r\n-                  <select\r\n-                    id=\"businessId\"\r\n-                    name=\"businessId\"\r\n-                    value={newPromotionData.businessId}\r\n-                    onChange={handleInputChange}\r\n-                    required\r\n-                    disabled={approvedBusinesses.length === 0}\r\n-                  >\r\n-                    <option value=\"\" disabled>\r\n-                      {approvedBusinesses.length === 0 ? \"No approved businesses available\" : \"-- Select an Approved Business --\"}\r\n-                    </option>\r\n-                    {approvedBusinesses.map(business => (\r\n-                      // Assuming business object has 'id' and 'businessName'\r\n-                      <option key={business.id} value={business.id}>\r\n-                        {business.businessName || `Business ID: ${business.id}`} {/* Fallback display name */}\r\n-                      </option>\r\n-                    ))}\r\n-                  </select>\r\n-                )}\r\n+                <label htmlFor=\"businessId\">Business ID:</label>\r\n+                <input type=\"number\" id=\"businessId\" name=\"businessId\" value={newPromotionData.businessId} onChange={handleInputChange} required />\r\n               </div>\r\n               <div>\r\n                 <label htmlFor=\"position\">Position:</label>\r\n                 <input type=\"text\" id=\"position\" name=\"position\" value={newPromotionData.position} onChange={handleInputChange} required />\r\n               </div>\r\n-              {/* Optional: Allow setting approval status directly, if applicable */}\r\n-              {/* <div><label><input type=\"checkbox\" name=\"isApproved\" checked={newPromotionData.isApproved} onChange={handleInputChange} /> Approved</label></div> */}\r\n+              {/* Consider if isApproved should be set here or by admin logic */}\r\n               <button type=\"submit\">Add Promotion</button>\r\n               <button type=\"button\" onClick={() => setShowAddModal(false)}>Cancel</button>\r\n             </form>\r\n           </div>\r\n"
                },
                {
                    "date": 1749432745604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,119 @@\n import { useState, useEffect } from 'react';\r\n-// import { getAllPromotions, addPromotion } from '../services/apiService'; // API calls commented out\r\n+import { getAllPromotions, addPromotion, dele} from '../services/apiService'; // API calls uncommented\r\n+import { IoMdAddCircleOutline } from 'react-icons/io'; // Import an icon for adding\r\n import '../styles/Promotions.css'; // Import the new CSS file\r\n \r\n-// Sample data for UI design purposes\r\n-const samplePromotions = [\r\n-  { id: 1, businessId: 101, position: 'Homepage Top Banner', isApproved: true },\r\n-  { id: 2, businessId: 102, position: 'Sidebar Ad Slot 1', isApproved: false },\r\n-  { id: 3, businessId: 103, position: 'Featured Listing - Category Page', isApproved: true },\r\n-  { id: 4, businessId: 104, position: 'Newsletter Spotlight', isApproved: true },\r\n-];\r\n-\r\n function Promotions({ isSidebarOpen }) {\r\n-  // const [promotions, setPromotions] = useState([]); // Using sample data instead\r\n-  const [promotions, setPromotions] = useState(samplePromotions); // Initialize with sample data\r\n-  // const [loading, setLoading] = useState(true); // Assuming data is loaded for UI design\r\n-  const [loading, setLoading] = useState(false);\r\n+  const [promotions, setPromotions] = useState([]); // Initialize with empty array for API data\r\n+  const [loading, setLoading] = useState(true); // Set loading to true initially\r\n   const [error, setError] = useState(null);\r\n   const [showAddModal, setShowAddModal] = useState(false);\r\n   const [newPromotionData, setNewPromotionData] = useState({\r\n     businessId: '',\r\n     position: '',\r\n-    isApproved: true, // Defaulting to true as per API example, adjust if needed\r\n+    // Add other fields your API expects for a new promotion, e.g., title, description, dates\r\n+    // For now, assuming isApproved is handled by backend or defaults\r\n   });\r\n+  const [isSubmitting, setIsSubmitting] = useState(false); // For add form submission\r\n \r\n   const fetchPromotions = async () => {\r\n-    // setLoading(true);\r\n-    // setError(null);\r\n-    // try {\r\n-    //   // const data = await getAllPromotions();\r\n-    //   // setPromotions(data || []);\r\n-    //   console.log(\"API call to fetch promotions would be here.\");\r\n-    // } catch (err) {\r\n-    //   console.error(\"Failed to fetch promotions:\", err);\r\n-    //   setError(err.message);\r\n-    //   setPromotions([]);\r\n-    // } finally {\r\n-    //   setLoading(false);\r\n-    // }\r\n+    setLoading(true);\r\n+    setError(null);\r\n+    try {\r\n+      const data = await getAllPromotions();\r\n+      setPromotions(data || []);\r\n+      console.log(\"Fetched promotions:\", data);\r\n+    } catch (err) {\r\n+      console.error(\"Failed to fetch promotions:\", err);\r\n+      setError(err.message || \"Failed to load promotions.\");\r\n+      setPromotions([]);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    // fetchPromotions(); // API call commented out\r\n-    // If you want to simulate loading for UI testing, you can add a timeout here\r\n-  }, []); \r\n+    fetchPromotions(); // Fetch promotions on component mount\r\n+  }, []);\r\n \r\n   const handleInputChange = (e) => {\r\n-    const { name, value, type, checked } = e.target;\r\n+    const { name, value } = e.target; // Removed type, checked as they are not used for these fields\r\n     setNewPromotionData(prev => ({\r\n       ...prev,\r\n-      [name]: type === 'checkbox' ? checked : value,\r\n+      [name]: value,\r\n     }));\r\n   };\r\n \r\n   const handleSubmitNewPromotion = async (e) => {\r\n     e.preventDefault();\r\n-    if (!newPromotionData.businessId || !newPromotionData.position) {\r\n-      alert(\"Business ID and Position are required.\");\r\n+    // Basic validation - enhance as needed\r\n+    if (!newPromotionData.businessId || !newPromotionData.position /* Add other required fields here */) {\r\n+      alert(\"Business ID and Position (and other required fields) are required.\");\r\n       return;\r\n     }\r\n+    setIsSubmitting(true);\r\n+    setError(null); \r\n     try {\r\n-      // Convert businessId and position to number if your API expects numbers\r\n       const payload = {\r\n         ...newPromotionData,\r\n         businessId: parseInt(newPromotionData.businessId, 10),\r\n-        // position might also need to be a number, adjust as per API\r\n+        // Ensure all fields expected by your '/promotions/add' API are included in payload\r\n+        // For example, if your API expects title, description, discountPercentage, startDate, endDate:\r\n+        // title: newPromotionData.title,\r\n+        // description: newPromotionData.description,\r\n+        // discountPercentage: parseFloat(newPromotionData.discountPercentage),\r\n+        // startDate: newPromotionData.startDate,\r\n+        // endDate: newPromotionData.endDate,\r\n+        // isApproved: true, // Or handle this based on your logic\r\n       };\r\n-      // await addPromotion(payload); // API call commented out\r\n-      console.log(\"Simulating add promotion with payload:\", payload);\r\n-      // Simulate adding to the local list for UI feedback\r\n-      setPromotions(prevPromotions => [\r\n-        ...prevPromotions,\r\n-        {\r\n-          id: Date.now(), // Temporary unique ID for UI\r\n-          ...payload\r\n-        }\r\n-      ]);\r\n+      const addedPromotion = await addPromotion(payload);\r\n+      console.log(\"Promotion added successfully:\", addedPromotion);\r\n+      \r\n       setShowAddModal(false);\r\n-      setNewPromotionData({ businessId: '', position: '', isApproved: true }); // Reset form\r\n-      // fetchPromotions(); // Refetch promotions to show the new one - commented out\r\n-      alert(\"Promotion added successfully!\");\r\n+      setNewPromotionData({ businessId: '', position: '' /* Reset other fields */ }); // Reset form\r\n+      fetchPromotions(); // Refetch promotions to show the new one\r\n+      alert(\"Promotion added successfully!\"); // Or use a more subtle notification\r\n     } catch (err) {\r\n       console.error(\"Failed to add promotion:\", err);\r\n-      setError(err.message);\r\n+      setError(err.message || \"Failed to add promotion.\"); // Set error state to display it\r\n       alert(`Failed to add promotion: ${err.message}`);\r\n+    } finally {\r\n+      setIsSubmitting(false);\r\n     }\r\n   };\r\n-  if (loading) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Loading promotions...</p></div>;\r\n-  if (error) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Error fetching promotions: {error}</p></div>;\r\n \r\n+  if (loading && promotions.length === 0) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p className=\"loading-message\">Loading promotions...</p></div>;\r\n+  // Keep error display for fetch errors, form errors will be handled separately if needed\r\n+  if (error && promotions.length === 0) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p className=\"error-message\">Error fetching promotions: {error}</p></div>;\r\n+\r\n+\r\n   return (\r\n     <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n-      <h1>Promotions</h1>\r\n+      <div className=\"promotions-header\">\r\n+        <h1>Promotions</h1>\r\n+        <button className=\"add-promo-button\" onClick={() => setShowAddModal(true)}>\r\n+          + Add Promotion\r\n+        </button>\r\n+      </div>\r\n+\r\n       <div className=\"promotions-grid\">\r\n         {/* Add Promotion Card */}\r\n         <div className=\"add-promotion-card\" onClick={() => setShowAddModal(true)}>\r\n-          <span className=\"plus-icon\">+</span>\r\n+          <IoMdAddCircleOutline className=\"add-promo-icon\" size={50} />\r\n           <p>Add New Promotion</p>\r\n         </div>\r\n \r\n         {/* Existing Promotion Cards */}\r\n         {promotions.map(promo => (\r\n-          <div key={promo.id || promo.businessId + '-' + promo.position} className=\"promotion-card\"> {/* Use a unique key */}\r\n-            <h3>Business ID: {promo.businessId}</h3>\r\n+          <div key={promo.id} className=\"promotion-card\">\r\n+            {/* You'll need to adjust what's displayed based on your promotion object structure */}\r\n+            <h3>{promo.title || `Business ID: ${promo.businessId}`}</h3>\r\n             <p>Position: {promo.position}</p>\r\n+            {promo.description && <p>Desc: {promo.description}</p>}\r\n+            {promo.discountPercentage && <p>Discount: {promo.discountPercentage}%</p>}\r\n+            {promo.startDate && <p>Starts: {new Date(promo.startDate).toLocaleDateString()}</p>}\r\n+            {promo.endDate && <p>Ends: {new Date(promo.endDate).toLocaleDateString()}</p>}\r\n             <p className={`status ${promo.isApproved ? 'approved' : 'pending'}`}>\r\n               Status: {promo.isApproved ? 'Approved' : 'Pending'}\r\n             </p>\r\n             {/* Add more details or actions (edit/delete) here if needed */}\r\n@@ -116,26 +126,53 @@\n       {showAddModal && (\r\n         <div className=\"modal-overlay\">\r\n           <div className=\"modal-content\">\r\n             <h2>Add New Promotion</h2>\r\n+            {error && <p className=\"error-message\" style={{textAlign: 'center'}}>{error}</p>} {/* Display form submission error */}\r\n             <form onSubmit={handleSubmitNewPromotion}>\r\n-              {/* Basic form, enhance with proper input components and validation */}\r\n               <div>\r\n-                <label htmlFor=\"businessId\">Business ID:</label>\r\n+                <label htmlFor=\"businessId\">Business ID*:</label>\r\n                 <input type=\"number\" id=\"businessId\" name=\"businessId\" value={newPromotionData.businessId} onChange={handleInputChange} required />\r\n               </div>\r\n               <div>\r\n-                <label htmlFor=\"position\">Position:</label>\r\n+                <label htmlFor=\"position\">Position*:</label>\r\n                 <input type=\"text\" id=\"position\" name=\"position\" value={newPromotionData.position} onChange={handleInputChange} required />\r\n               </div>\r\n-              {/* Consider if isApproved should be set here or by admin logic */}\r\n-              <button type=\"submit\">Add Promotion</button>\r\n-              <button type=\"button\" onClick={() => setShowAddModal(false)}>Cancel</button>\r\n+              {/* \r\n+                Add other fields required by your API for adding a promotion.\r\n+                For example:\r\n+              <div>\r\n+                <label htmlFor=\"title\">Title*:</label>\r\n+                <input type=\"text\" id=\"title\" name=\"title\" value={newPromotionData.title || ''} onChange={handleInputChange} required />\r\n\\ No newline at end of file\n+              </div>\r\n+              <div>\r\n+                <label htmlFor=\"description\">Description:</label>\r\n+                <textarea id=\"description\" name=\"description\" value={newPromotionData.description || ''} onChange={handleInputChange} />\r\n+              </div>\r\n+              <div>\r\n+                <label htmlFor=\"discountPercentage\">Discount %*:</label>\r\n+                <input type=\"number\" id=\"discountPercentage\" name=\"discountPercentage\" value={newPromotionData.discountPercentage || ''} onChange={handleInputChange} required />\r\n+              </div>\r\n+              <div>\r\n+                <label htmlFor=\"startDate\">Start Date*:</label>\r\n+                <input type=\"date\" id=\"startDate\" name=\"startDate\" value={newPromotionData.startDate || ''} onChange={handleInputChange} required />\r\n+              </div>\r\n+              <div>\r\n+                <label htmlFor=\"endDate\">End Date*:</label>\r\n+                <input type=\"date\" id=\"endDate\" name=\"endDate\" value={newPromotionData.endDate || ''} onChange={handleInputChange} required />\r\n+              </div>\r\n+              */}\r\n+              <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n+                <button type=\"button\" onClick={() => setShowAddModal(false)} style={{ marginRight: '10px' }}>Cancel</button>\r\n+                <button type=\"submit\" disabled={isSubmitting}>\r\n+                  {isSubmitting ? 'Adding...' : 'Add Promotion'}\r\n+                </button>\r\n+              </div>\r\n             </form>\r\n           </div>\r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n \r\n-export default Promotions;\n+export default Promotions;\r\n"
                },
                {
                    "date": 1749432751107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useEffect } from 'react';\r\n-import { getAllPromotions, addPromotion, deletePromo} from '../services/apiService'; // API calls uncommented\r\n+import { getAllPromotions, addPromotion, deletePromotion } from '../services/apiService'; // API calls uncommented\r\n import { IoMdAddCircleOutline } from 'react-icons/io'; // Import an icon for adding\r\n import '../styles/Promotions.css'; // Import the new CSS file\r\n \r\n function Promotions({ isSidebarOpen }) {\r\n"
                },
                {
                    "date": 1749432962194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,10 +167,10 @@\n       {showAddModal && (\r\n         <div className=\"modal-overlay\">\r\n           <div className=\"modal-content\">\r\n             <h2>Add New Promotion</h2>\r\n-            {error && <p className=\"error-message\" style={{textAlign: 'center'}}>{error}</p>} {/* Display form submission error */}\r\n-            <form onSubmit={handleSubmitNewPromotion}>\r\n+{error && showAddModal && <p className=\"error-message\" style={{textAlign: 'center'}}>{error}</p>} {/* Display form submission error specifically for modal */}\r\n+            <            <form onSubmit={handleSubmitNewPromotion}>\r\n               <div>\r\n                 <label htmlFor=\"businessId\">Business ID*:</label>\r\n                 <input type=\"number\" id=\"businessId\" name=\"businessId\" value={newPromotionData.businessId} onChange={handleInputChange} required />\r\n               </div>\r\n"
                }
            ],
            "date": 1748540889395,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { getAllPromotions, addPromotion } from '../services/apiService';\r\nimport '../styles/Promotions.css'; // Import the new CSS file\r\n\r\nfunction Promotions({ isSidebarOpen }) {\r\n  const [promotions, setPromotions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [newPromotionData, setNewPromotionData] = useState({\r\n    businessId: '',\r\n    position: '',\r\n    isApproved: true, // Defaulting to true as per API example, adjust if needed\r\n  });\r\n\r\n  const fetchPromotions = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await getAllPromotions();\r\n      setPromotions(data || []);\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch promotions:\", err);\r\n      setError(err.message);\r\n      setPromotions([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPromotions();\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setNewPromotionData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmitNewPromotion = async (e) => {\r\n    e.preventDefault();\r\n    if (!newPromotionData.businessId || !newPromotionData.position) {\r\n      alert(\"Business ID and Position are required.\");\r\n      return;\r\n    }\r\n    try {\r\n      // Convert businessId and position to number if your API expects numbers\r\n      const payload = {\r\n        ...newPromotionData,\r\n        businessId: parseInt(newPromotionData.businessId, 10),\r\n        // position might also need to be a number, adjust as per API\r\n      };\r\n      await addPromotion(payload);\r\n      setShowAddModal(false);\r\n      setNewPromotionData({ businessId: '', position: '', isApproved: true }); // Reset form\r\n      fetchPromotions(); // Refetch promotions to show the new one\r\n      alert(\"Promotion added successfully!\");\r\n    } catch (err) {\r\n      console.error(\"Failed to add promotion:\", err);\r\n      setError(err.message);\r\n      alert(`Failed to add promotion: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Loading promotions...</p></div>;\r\n  if (error) return <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}><p>Error fetching promotions: {error}</p></div>;\r\n\r\n  return (\r\n    <div className={`promotions-page ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n      <h1>Promotions</h1>\r\n      <div className=\"promotions-grid\">\r\n        {/* Add Promotion Card */}\r\n        <div className=\"add-promotion-card\" onClick={() => setShowAddModal(true)}>\r\n          <span className=\"plus-icon\">+</span>\r\n          <p>Add New Promotion</p>\r\n        </div>\r\n\r\n        {/* Existing Promotion Cards */}\r\n        {promotions.map(promo => (\r\n          <div key={promo.id || promo.businessId + '-' + promo.position} className=\"promotion-card\"> {/* Use a unique key */}\r\n            <h3>Business ID: {promo.businessId}</h3>\r\n            <p>Position: {promo.position}</p>\r\n            <p className={`status ${promo.isApproved ? 'approved' : 'pending'}`}>\r\n              Status: {promo.isApproved ? 'Approved' : 'Pending'}\r\n            </p>\r\n            {/* Add more details or actions (edit/delete) here if needed */}\r\n          </div>\r\n        ))}\r\n        {promotions.length === 0 && !loading && <p>No promotions found.</p>}\r\n      </div>\r\n\r\n      {/* Add Promotion Modal */}\r\n      {showAddModal && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <h2>Add New Promotion</h2>\r\n            <form onSubmit={handleSubmitNewPromotion}>\r\n              {/* Basic form, enhance with proper input components and validation */}\r\n              <div>\r\n                <label htmlFor=\"businessId\">Business ID:</label>\r\n                <input type=\"number\" id=\"businessId\" name=\"businessId\" value={newPromotionData.businessId} onChange={handleInputChange} required />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"position\">Position:</label>\r\n                <input type=\"text\" id=\"position\" name=\"position\" value={newPromotionData.position} onChange={handleInputChange} required />\r\n              </div>\r\n              {/* Consider if isApproved should be set here or by admin logic */}\r\n              <button type=\"submit\">Add Promotion</button>\r\n              <button type=\"button\" onClick={() => setShowAddModal(false)}>Cancel</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Promotions;"
        }
    ]
}