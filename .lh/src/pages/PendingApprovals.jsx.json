{
    "sourceFile": "src/pages/PendingApprovals.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1748538859119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748538884738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+import { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import '../styles/PendingApprovals.css';\r\n+import { getAllBusinessPartners } from '../services/apiService'; // Import the API function\r\n+\r\n+function PendingApprovals({ isSidebarOpen }) {\r\n+  // State for dropdowns in headers\r\n+  const [allBusinesses, setAllBusinesses] = useState([]);\r\n+  const [filteredBusinesses, setFilteredBusinesses] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  const [isServiceDropdownOpen, setIsServiceDropdownOpen] = useState(false);\r\n+  const [isStatusDropdownOpen, setIsStatusDropdownOpen] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState('Service');\r\n+  const [selectedStatus, setSelectedStatus] = useState('Pending');\r\n+\r\n+  // Options for dropdowns\r\n+  const serviceOptions = ['All', 'Catering', 'Photography', 'Decoration'];\r\n+  // For this page, we are only interested in 'Pending' status.\r\n+  // If you had other statuses for pending items, you could add them here.\r\n+  const statusOptions = ['Pending']; \r\n+\r\n+  // Toggle dropdown visibility\r\n+  const toggleServiceDropdown = () => setIsServiceDropdownOpen(!isServiceDropdownOpen);\r\n+  const toggleStatusDropdown = () => setIsStatusDropdownOpen(!isStatusDropdownOpen);\r\n+\r\n+  // Handle selection of options\r\n+  const handleServiceSelect = (value) => {\r\n+    setSelectedService(value);\r\n+    setIsServiceDropdownOpen(false);\r\n+  };\r\n+  const handleStatusSelect = (value) => {\r\n+    setSelectedStatus(value);\r\n+    setIsStatusDropdownOpen(false);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const fetchBusinesses = async () => {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+      try {\r\n+        const data = await getAllBusinessPartners();\r\n+        setAllBusinesses(data || []); // Ensure data is an array\r\n+      } catch (err) {\r\n+        console.error(\"Failed to fetch business partners:\", err);\r\n+        setError(err.message);\r\n+        setAllBusinesses([]); // Set to empty array on error\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+    fetchBusinesses();\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Filter businesses based on approval status and selected service\r\n+    let currentBusinesses = allBusinesses.filter(business => !business.isApproved); // Show only not approved\r\n+\r\n+    if (selectedService !== 'All' && selectedService !== 'Service') {\r\n+      currentBusinesses = currentBusinesses.filter(business => business.service === selectedService);\r\n+    }\r\n+    \r\n+    // The selectedStatus is always 'Pending' for this page, so no explicit filter needed for it here\r\n+    // if you were to allow other statuses like 'Rejected', you'd filter by selectedStatus here.\r\n+\r\n+    setFilteredBusinesses(currentBusinesses);\r\n+  }, [allBusinesses, selectedService, selectedStatus]);\r\n+\r\n+  return (\r\n+    <div className={`pending-approvals ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n+      {/* Header Section */}\r\n+      <div className=\"pending-approvals-header\">\r\n+        <div className=\"header-left\">\r\n+          {/* Consider making this a Link to navigate back if needed */}\r\n+          <span className=\"back-arrow\" onClick={() => window.history.back()} style={{cursor: 'pointer'}}>‚Üê</span>\r\n+          <h1>Pending Approvals</h1>\r\n+        </div>\r\n+        <div className=\"header-right\">\r\n+          <div className=\"search-bar\">\r\n+            <input type=\"text\" placeholder=\"Search\" />\r\n+            <span className=\"search-icon\">üîç</span>\r\n+          </div>\r\n+          <div className=\"date-dropdown\">\r\n+            <span onClick={() => {}} className=\"date-text\">Today</span>\r\n+            <span className=\"dropdown-arrow\">‚ñº</span>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {loading && <p className=\"loading-message\">Loading pending approvals...</p>}\r\n+      {error && <p className=\"error-message\">Error: {error}</p>}\r\n+\r\n+      {/* Table Section */}\r\n+      <div className=\"table-container\">\r\n+        <table className=\"pending-approvals-table\">\r\n+          <thead>\r\n+            <tr>\r\n+              <th>Business Name</th>\r\n+              <th>\r\n+                <div className=\"custom-dropdown\">\r\n+                  <div className=\"dropdown-header\" onClick={toggleServiceDropdown}>\r\n+                    {selectedService} <span className=\"dropdown-arrow\">‚ñº</span>\r\n+                  </div>\r\n+                  {isServiceDropdownOpen && (\r\n+                    <ul className=\"dropdown-options\">\r\n+                      {serviceOptions.map((option) => (\r\n+                        <li\r\n+                          key={option}\r\n+                          className=\"dropdown-option\"\r\n+                          onClick={() => handleServiceSelect(option)}\r\n+                        >\r\n+                          {option}\r\n+                        </li>\r\n+                      ))}\r\n+                    </ul>\r\n+                  )}\r\n+                </div>\r\n+              </th>\r\n+              <th>Phone Number</th>\r\n+              <th>Plan</th>\r\n+              <th>\r\n+                <div className=\"custom-dropdown\">\r\n+                  <div className=\"dropdown-header\" onClick={toggleStatusDropdown}>\r\n+                    {selectedStatus} <span className=\"dropdown-arrow\">‚ñº</span>\r\n+                  </div>\r\n+                  {isStatusDropdownOpen && (\r\n+                    <ul className=\"dropdown-options\">\r\n+                      {statusOptions.map((option) => (\r\n+                        <li\r\n+                          key={option}\r\n+                          className=\"dropdown-option\"\r\n+                          onClick={() => handleStatusSelect(option)}\r\n+                        >\r\n+                          {option}\r\n+                        </li>\r\n+                      ))}\r\n+                    </ul>\r\n+                  )}\r\n+                </div>\r\n+              </th>\r\n+              <th>View</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {!loading && !error && filteredBusinesses.map((business, index) => (\r\n+              <tr key={index} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>\r\n+                <td>{business.businessName}</td>\r\n+                <td>{business.service}</td>\r\n+                <td>{business.phoneNumber}</td>\r\n+                <td>{business.plan}</td>\r\n+                <td>Pending</td> {/* Since we filter for !isApproved, status is implicitly Pending */}\r\n+                <td>\r\n+                  <Link\r\n+                    to=\"/view-details\"\r\n+                    state={{\r\n+                      data: {\r\n+                        ...business, // Pass the whole business object\r\n+                        // Ensure all necessary fields are present in the business object from API\r\n+                        // Or map them explicitly if names differ\r\n+                        // proprietorName: business.proprietorName || business.businessName?.split(' ')[0],\r\n+                        // email: business.email || `${business.businessName?.split(' ')[0].toLowerCase()}@example.com`,\r\n+                        // state: business.state || 'N/A',\r\n+                        // district: business.district || 'N/A',\r\n+                        // location: business.location || 'N/A',\r\n+                        // paymentStatus: business.paymentStatus || 'Pending',\r\n+                        // paymentMode: business.paymentMode || 'N/A',\r\n+                        status: 'Pending' // Explicitly set status for ViewDetails if needed\r\n+                      },\r\n+                    }}\r\n+                    className=\"view-link\"\r\n+                  >\r\n+                    View\r\n+                  </Link>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+            {!loading && !error && filteredBusinesses.length === 0 && (\r\n+              <tr>\r\n+                <td colSpan=\"6\" style={{ textAlign: 'center' }}>No pending approvals found.</td>\r\n+              </tr>\r\n+            )}\r\n+          </tbody>\r\n+        </table>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default PendingApprovals;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748539006432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n-import { useState, useEffect } from 'react';\r\n+import { useState, useEffect, useMemo } from 'react';\r\n import { Link } from 'react-router-dom';\r\n import '../styles/PendingApprovals.css';\r\n import { getAllBusinessPartners } from '../services/apiService'; // Import the API function\r\n \r\n function PendingApprovals({ isSidebarOpen }) {\r\n   // State for dropdowns in headers\r\n   const [allBusinesses, setAllBusinesses] = useState([]);\r\n-  const [filteredBusinesses, setFilteredBusinesses] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n \r\n   const [isServiceDropdownOpen, setIsServiceDropdownOpen] = useState(false);\r\n@@ -52,20 +51,19 @@\n     };\r\n     fetchBusinesses();\r\n   }, []);\r\n \r\n-  useEffect(() => {\r\n+  const filteredBusinesses = useMemo(() => {\r\n     // Filter businesses based on approval status and selected service\r\n     let currentBusinesses = allBusinesses.filter(business => !business.isApproved); // Show only not approved\r\n \r\n     if (selectedService !== 'All' && selectedService !== 'Service') {\r\n       currentBusinesses = currentBusinesses.filter(business => business.service === selectedService);\r\n     }\r\n-    \r\n+\r\n     // The selectedStatus is always 'Pending' for this page, so no explicit filter needed for it here\r\n     // if you were to allow other statuses like 'Rejected', you'd filter by selectedStatus here.\r\n-\r\n-    setFilteredBusinesses(currentBusinesses);\r\n+    return currentBusinesses;\r\n   }, [allBusinesses, selectedService, selectedStatus]);\r\n \r\n   return (\r\n     <div className={`pending-approvals ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n"
                },
                {
                    "date": 1748539039099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,195 +184,5 @@\n     </div>\r\n   );\r\n }\r\n \r\n-export default PendingApprovals;\n-import { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import '../styles/PendingApprovals.css';\r\n-import { getAllBusinessPartners } from '../services/apiService'; // Import the API function\r\n-\r\n-function PendingApprovals({ isSidebarOpen }) {\r\n-  // State for dropdowns in headers\r\n-  const [allBusinesses, setAllBusinesses] = useState([]);\r\n-  const [filteredBusinesses, setFilteredBusinesses] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  const [isServiceDropdownOpen, setIsServiceDropdownOpen] = useState(false);\r\n-  const [isStatusDropdownOpen, setIsStatusDropdownOpen] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState('Service');\r\n-  const [selectedStatus, setSelectedStatus] = useState('Pending');\r\n-\r\n-  // Options for dropdowns\r\n-  const serviceOptions = ['All', 'Catering', 'Photography', 'Decoration'];\r\n-  // For this page, we are only interested in 'Pending' status.\r\n-  // If you had other statuses for pending items, you could add them here.\r\n-  const statusOptions = ['Pending']; \r\n-\r\n-  // Toggle dropdown visibility\r\n-  const toggleServiceDropdown = () => setIsServiceDropdownOpen(!isServiceDropdownOpen);\r\n-  const toggleStatusDropdown = () => setIsStatusDropdownOpen(!isStatusDropdownOpen);\r\n-\r\n-  // Handle selection of options\r\n-  const handleServiceSelect = (value) => {\r\n-    setSelectedService(value);\r\n-    setIsServiceDropdownOpen(false);\r\n-  };\r\n-  const handleStatusSelect = (value) => {\r\n-    setSelectedStatus(value);\r\n-    setIsStatusDropdownOpen(false);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const fetchBusinesses = async () => {\r\n-      setLoading(true);\r\n-      setError(null);\r\n-      try {\r\n-        const data = await getAllBusinessPartners();\r\n-        setAllBusinesses(data || []); // Ensure data is an array\r\n-      } catch (err) {\r\n-        console.error(\"Failed to fetch business partners:\", err);\r\n-        setError(err.message);\r\n-        setAllBusinesses([]); // Set to empty array on error\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-    fetchBusinesses();\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Filter businesses based on approval status and selected service\r\n-    let currentBusinesses = allBusinesses.filter(business => !business.isApproved); // Show only not approved\r\n-\r\n-    if (selectedService !== 'All' && selectedService !== 'Service') {\r\n-      currentBusinesses = currentBusinesses.filter(business => business.service === selectedService);\r\n-    }\r\n-    \r\n-    // The selectedStatus is always 'Pending' for this page, so no explicit filter needed for it here\r\n-    // if you were to allow other statuses like 'Rejected', you'd filter by selectedStatus here.\r\n-\r\n-    setFilteredBusinesses(currentBusinesses);\r\n-  }, [allBusinesses, selectedService, selectedStatus]);\r\n-\r\n-  return (\r\n-    <div className={`pending-approvals ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n-      {/* Header Section */}\r\n-      <div className=\"pending-approvals-header\">\r\n-        <div className=\"header-left\">\r\n-          {/* Consider making this a Link to navigate back if needed */}\r\n-          <span className=\"back-arrow\" onClick={() => window.history.back()} style={{cursor: 'pointer'}}>‚Üê</span>\r\n-          <h1>Pending Approvals</h1>\r\n-        </div>\r\n-        <div className=\"header-right\">\r\n-          <div className=\"search-bar\">\r\n-            <input type=\"text\" placeholder=\"Search\" />\r\n-            <span className=\"search-icon\">üîç</span>\r\n-          </div>\r\n-          <div className=\"date-dropdown\">\r\n-            <span onClick={() => {}} className=\"date-text\">Today</span>\r\n-            <span className=\"dropdown-arrow\">‚ñº</span>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {loading && <p className=\"loading-message\">Loading pending approvals...</p>}\r\n-      {error && <p className=\"error-message\">Error: {error}</p>}\r\n-\r\n-      {/* Table Section */}\r\n-      <div className=\"table-container\">\r\n-        <table className=\"pending-approvals-table\">\r\n-          <thead>\r\n-            <tr>\r\n-              <th>Business Name</th>\r\n-              <th>\r\n-                <div className=\"custom-dropdown\">\r\n-                  <div className=\"dropdown-header\" onClick={toggleServiceDropdown}>\r\n-                    {selectedService} <span className=\"dropdown-arrow\">‚ñº</span>\r\n-                  </div>\r\n-                  {isServiceDropdownOpen && (\r\n-                    <ul className=\"dropdown-options\">\r\n-                      {serviceOptions.map((option) => (\r\n-                        <li\r\n-                          key={option}\r\n-                          className=\"dropdown-option\"\r\n-                          onClick={() => handleServiceSelect(option)}\r\n-                        >\r\n-                          {option}\r\n-                        </li>\r\n-                      ))}\r\n-                    </ul>\r\n-                  )}\r\n-                </div>\r\n-              </th>\r\n-              <th>Phone Number</th>\r\n-              <th>Plan</th>\r\n-              <th>\r\n-                <div className=\"custom-dropdown\">\r\n-                  <div className=\"dropdown-header\" onClick={toggleStatusDropdown}>\r\n-                    {selectedStatus} <span className=\"dropdown-arrow\">‚ñº</span>\r\n-                  </div>\r\n-                  {isStatusDropdownOpen && (\r\n-                    <ul className=\"dropdown-options\">\r\n-                      {statusOptions.map((option) => (\r\n-                        <li\r\n-                          key={option}\r\n-                          className=\"dropdown-option\"\r\n-                          onClick={() => handleStatusSelect(option)}\r\n-                        >\r\n-                          {option}\r\n-                        </li>\r\n-                      ))}\r\n-                    </ul>\r\n-                  )}\r\n-                </div>\r\n-              </th>\r\n-              <th>View</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {!loading && !error && filteredBusinesses.map((business, index) => (\r\n-              <tr key={index} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>\r\n-                <td>{business.businessName}</td>\r\n-                <td>{business.service}</td>\r\n-                <td>{business.phoneNumber}</td>\r\n-                <td>{business.plan}</td>\r\n-                <td>Pending</td> {/* Since we filter for !isApproved, status is implicitly Pending */}\r\n-                <td>\r\n-                  <Link\r\n-                    to=\"/view-details\"\r\n-                    state={{\r\n-                      data: {\r\n-                        ...business, // Pass the whole business object\r\n-                        // Ensure all necessary fields are present in the business object from API\r\n-                        // Or map them explicitly if names differ\r\n-                        // proprietorName: business.proprietorName || business.businessName?.split(' ')[0],\r\n-                        // email: business.email || `${business.businessName?.split(' ')[0].toLowerCase()}@example.com`,\r\n-                        // state: business.state || 'N/A',\r\n-                        // district: business.district || 'N/A',\r\n-                        // location: business.location || 'N/A',\r\n-                        // paymentStatus: business.paymentStatus || 'Pending',\r\n-                        // paymentMode: business.paymentMode || 'N/A',\r\n-                        status: 'Pending' // Explicitly set status for ViewDetails if needed\r\n-                      },\r\n-                    }}\r\n-                    className=\"view-link\"\r\n-                  >\r\n-                    View\r\n-                  </Link>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-            {!loading && !error && filteredBusinesses.length === 0 && (\r\n-              <tr>\r\n-                <td colSpan=\"6\" style={{ textAlign: 'center' }}>No pending approvals found.</td>\r\n-              </tr>\r\n-            )}\r\n-          </tbody>\r\n-        </table>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n export default PendingApprovals;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749477450151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,28 +142,29 @@\n               <th>View</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {!loading && !error && filteredBusinesses.map((business, index) => (\r\n-              <tr key={index} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>\r\n-                <td>{business.id || 'N/A'}</td>\r\n-                <td>{business.businessName || 'N/A'}</td>\r\n-                <td>{business.serviceProvided || 'N/A'}</td>\r\n-                <td>{business.phoneNumber || 'N/A'}</td>\r\n-                <td>{business.plan || 'N/A'}</td> {/* Assuming 'plan' is a field */}\r\n-                <td>Pending</td> {/* Since we filter for !isApproved, status is implicitly Pending */}\r\n-                <td>\r\n-                  <Link to={`/business-profile/${(business.id)}`} className=\"view-link\">\r\n-                    View\r\n-                  </Link>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-            {!loading && !error && filteredBusinesses.length === 0 && (\r\n-              <tr>\r\n-                <td colSpan=\"7\" style={{ textAlign: 'center' }}>No pending approvals found.</td>\r\n-              </tr>\r\n-            )}\r\n+            {!loading && !error && filteredBusinesses.length > 0 ? (\r\n+              filteredBusinesses.map((business, index) => (\r\n+                <tr key={business.id || index} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>\r\n+                  <td>{business.id || 'N/A'}</td>\r\n+                  <td>{business.businessName || 'N/A'}</td>\r\n+                  <td>{business.serviceProvided || 'N/A'}</td>\r\n+                  <td>{business.phoneNumber || 'N/A'}</td>\r\n+                  <td>{business.plan || 'N/A'}</td> {/* Assuming 'plan' is a field */}\r\n+                  <td>Pending</td> {/* Since we filter for !isApproved, status is implicitly Pending */}\r\n+                  <td>\r\n+                    <Link to={`/business-profile/${(business.id)}`} className=\"view-link\">\r\n+                      View\r\n+                    </Link>\r\n+                  </td>\r\n+                </tr>\r\n+              ))\r\n+            ) : !loading && !error && filteredBusinesses.length === 0 ? (\r\n+                <tr>\r\n+                  <td colSpan=\"7\" style={{ textAlign: 'center' }}>No pending approvals found.</td>\r\n+                </tr>\r\n+            ) : null}\r\n           </tbody>\r\n         </table>\r\n       </div>\r\n     </div>\r\n"
                }
            ],
            "date": 1748538859119,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/PendingApprovals.css';\r\nimport { getAllBusinessPartners } from '../services/apiService'; // Import the API function\r\n\r\nfunction PendingApprovals({ isSidebarOpen }) {\r\n  // State for dropdowns in headers\r\n  const [allBusinesses, setAllBusinesses] = useState([]);\r\n  const [filteredBusinesses, setFilteredBusinesses] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [isServiceDropdownOpen, setIsServiceDropdownOpen] = useState(false);\r\n  const [isStatusDropdownOpen, setIsStatusDropdownOpen] = useState(false);\r\n  const [selectedService, setSelectedService] = useState('Service');\r\n  const [selectedStatus, setSelectedStatus] = useState('Pending');\r\n\r\n  // Options for dropdowns\r\n  const serviceOptions = ['All', 'Catering', 'Photography', 'Decoration'];\r\n  // For this page, we are only interested in 'Pending' status.\r\n  // If you had other statuses for pending items, you could add them here.\r\n  const statusOptions = ['Pending']; \r\n\r\n  // Toggle dropdown visibility\r\n  const toggleServiceDropdown = () => setIsServiceDropdownOpen(!isServiceDropdownOpen);\r\n  const toggleStatusDropdown = () => setIsStatusDropdownOpen(!isStatusDropdownOpen);\r\n\r\n  // Handle selection of options\r\n  const handleServiceSelect = (value) => {\r\n    setSelectedService(value);\r\n    setIsServiceDropdownOpen(false);\r\n  };\r\n  const handleStatusSelect = (value) => {\r\n    setSelectedStatus(value);\r\n    setIsStatusDropdownOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchBusinesses = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const data = await getAllBusinessPartners();\r\n        setAllBusinesses(data || []); // Ensure data is an array\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch business partners:\", err);\r\n        setError(err.message);\r\n        setAllBusinesses([]); // Set to empty array on error\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchBusinesses();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Filter businesses based on approval status and selected service\r\n    let currentBusinesses = allBusinesses.filter(business => !business.isApproved); // Show only not approved\r\n\r\n    if (selectedService !== 'All' && selectedService !== 'Service') {\r\n      currentBusinesses = currentBusinesses.filter(business => business.service === selectedService);\r\n    }\r\n    \r\n    // The selectedStatus is always 'Pending' for this page, so no explicit filter needed for it here\r\n    // if you were to allow other statuses like 'Rejected', you'd filter by selectedStatus here.\r\n\r\n    setFilteredBusinesses(currentBusinesses);\r\n  }, [allBusinesses, selectedService, selectedStatus]);\r\n\r\n  return (\r\n    <div className={`pending-approvals ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\r\n      {/* Header Section */}\r\n      <div className=\"pending-approvals-header\">\r\n        <div className=\"header-left\">\r\n          {/* Consider making this a Link to navigate back if needed */}\r\n          <span className=\"back-arrow\" onClick={() => window.history.back()} style={{cursor: 'pointer'}}>‚Üê</span>\r\n          <h1>Pending Approvals</h1>\r\n        </div>\r\n        <div className=\"header-right\">\r\n          <div className=\"search-bar\">\r\n            <input type=\"text\" placeholder=\"Search\" />\r\n            <span className=\"search-icon\">üîç</span>\r\n          </div>\r\n          <div className=\"date-dropdown\">\r\n            <span onClick={() => {}} className=\"date-text\">Today</span>\r\n            <span className=\"dropdown-arrow\">‚ñº</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {loading && <p className=\"loading-message\">Loading pending approvals...</p>}\r\n      {error && <p className=\"error-message\">Error: {error}</p>}\r\n\r\n      {/* Table Section */}\r\n      <div className=\"table-container\">\r\n        <table className=\"pending-approvals-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Business Name</th>\r\n              <th>\r\n                <div className=\"custom-dropdown\">\r\n                  <div className=\"dropdown-header\" onClick={toggleServiceDropdown}>\r\n                    {selectedService} <span className=\"dropdown-arrow\">‚ñº</span>\r\n                  </div>\r\n                  {isServiceDropdownOpen && (\r\n                    <ul className=\"dropdown-options\">\r\n                      {serviceOptions.map((option) => (\r\n                        <li\r\n                          key={option}\r\n                          className=\"dropdown-option\"\r\n                          onClick={() => handleServiceSelect(option)}\r\n                        >\r\n                          {option}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n              </th>\r\n              <th>Phone Number</th>\r\n              <th>Plan</th>\r\n              <th>\r\n                <div className=\"custom-dropdown\">\r\n                  <div className=\"dropdown-header\" onClick={toggleStatusDropdown}>\r\n                    {selectedStatus} <span className=\"dropdown-arrow\">‚ñº</span>\r\n                  </div>\r\n                  {isStatusDropdownOpen && (\r\n                    <ul className=\"dropdown-options\">\r\n                      {statusOptions.map((option) => (\r\n                        <li\r\n                          key={option}\r\n                          className=\"dropdown-option\"\r\n                          onClick={() => handleStatusSelect(option)}\r\n                        >\r\n                          {option}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n              </th>\r\n              <th>View</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {!loading && !error && filteredBusinesses.map((business, index) => (\r\n              <tr key={index} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>\r\n                <td>{business.businessName}</td>\r\n                <td>{business.service}</td>\r\n                <td>{business.phoneNumber}</td>\r\n                <td>{business.plan}</td>\r\n                <td>Pending</td> {/* Since we filter for !isApproved, status is implicitly Pending */}\r\n                <td>\r\n                  <Link\r\n                    to=\"/view-details\"\r\n                    state={{\r\n                      data: {\r\n                        ...business, // Pass the whole business object\r\n                        // Ensure all necessary fields are present in the business object from API\r\n                        // Or map them explicitly if names differ\r\n                        // proprietorName: business.proprietorName || business.businessName?.split(' ')[0],\r\n                        // email: business.email || `${business.businessName?.split(' ')[0].toLowerCase()}@example.com`,\r\n                        // state: business.state || 'N/A',\r\n                        // district: business.district || 'N/A',\r\n                        // location: business.location || 'N/A',\r\n                        // paymentStatus: business.paymentStatus || 'Pending',\r\n                        // paymentMode: business.paymentMode || 'N/A',\r\n                        status: 'Pending' // Explicitly set status for ViewDetails if needed\r\n                      },\r\n                    }}\r\n                    className=\"view-link\"\r\n                  >\r\n                    View\r\n                  </Link>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n            {!loading && !error && filteredBusinesses.length === 0 && (\r\n              <tr>\r\n                <td colSpan=\"6\" style={{ textAlign: 'center' }}>No pending approvals found.</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PendingApprovals;"
        }
    ]
}